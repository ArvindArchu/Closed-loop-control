
G4-closed-loop-software-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032e8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080034c0  080034c0  000044c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f4  080034f4  00005024  2**0
                  CONTENTS
  4 .ARM          00000008  080034f4  080034f4  000044f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034fc  080034fc  00005024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034fc  080034fc  000044fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003500  08003500  00004500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08003504  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000028  08003528  00005028  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003528  00005134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae9c  00000000  00000000  00005054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001942  00000000  00000000  0000fef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00011838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000706  00000000  00000000  00012168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d2f  00000000  00000000  0001286e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b659  00000000  00000000  0003759d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9749  00000000  00000000  00042bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c33f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a8  00000000  00000000  0012c384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000028 	.word	0x20000028
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080034a8 	.word	0x080034a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000002c 	.word	0x2000002c
 8000214:	080034a8 	.word	0x080034a8

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b96a 	b.w	8000e00 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9d08      	ldr	r5, [sp, #32]
 8000b4a:	460c      	mov	r4, r1
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d14e      	bne.n	8000bee <__udivmoddi4+0xaa>
 8000b50:	4694      	mov	ip, r2
 8000b52:	458c      	cmp	ip, r1
 8000b54:	4686      	mov	lr, r0
 8000b56:	fab2 f282 	clz	r2, r2
 8000b5a:	d962      	bls.n	8000c22 <__udivmoddi4+0xde>
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0320 	rsb	r3, r2, #32
 8000b62:	4091      	lsls	r1, r2
 8000b64:	fa20 f303 	lsr.w	r3, r0, r3
 8000b68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6c:	4319      	orrs	r1, r3
 8000b6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b76:	fa1f f68c 	uxth.w	r6, ip
 8000b7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b82:	fb07 1114 	mls	r1, r7, r4, r1
 8000b86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b8a:	fb04 f106 	mul.w	r1, r4, r6
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d90a      	bls.n	8000ba8 <__udivmoddi4+0x64>
 8000b92:	eb1c 0303 	adds.w	r3, ip, r3
 8000b96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b9a:	f080 8112 	bcs.w	8000dc2 <__udivmoddi4+0x27e>
 8000b9e:	4299      	cmp	r1, r3
 8000ba0:	f240 810f 	bls.w	8000dc2 <__udivmoddi4+0x27e>
 8000ba4:	3c02      	subs	r4, #2
 8000ba6:	4463      	add	r3, ip
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	fa1f f38e 	uxth.w	r3, lr
 8000bae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb2:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bba:	fb00 f606 	mul.w	r6, r0, r6
 8000bbe:	429e      	cmp	r6, r3
 8000bc0:	d90a      	bls.n	8000bd8 <__udivmoddi4+0x94>
 8000bc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bca:	f080 80fc 	bcs.w	8000dc6 <__udivmoddi4+0x282>
 8000bce:	429e      	cmp	r6, r3
 8000bd0:	f240 80f9 	bls.w	8000dc6 <__udivmoddi4+0x282>
 8000bd4:	4463      	add	r3, ip
 8000bd6:	3802      	subs	r0, #2
 8000bd8:	1b9b      	subs	r3, r3, r6
 8000bda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bde:	2100      	movs	r1, #0
 8000be0:	b11d      	cbz	r5, 8000bea <__udivmoddi4+0xa6>
 8000be2:	40d3      	lsrs	r3, r2
 8000be4:	2200      	movs	r2, #0
 8000be6:	e9c5 3200 	strd	r3, r2, [r5]
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	428b      	cmp	r3, r1
 8000bf0:	d905      	bls.n	8000bfe <__udivmoddi4+0xba>
 8000bf2:	b10d      	cbz	r5, 8000bf8 <__udivmoddi4+0xb4>
 8000bf4:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4608      	mov	r0, r1
 8000bfc:	e7f5      	b.n	8000bea <__udivmoddi4+0xa6>
 8000bfe:	fab3 f183 	clz	r1, r3
 8000c02:	2900      	cmp	r1, #0
 8000c04:	d146      	bne.n	8000c94 <__udivmoddi4+0x150>
 8000c06:	42a3      	cmp	r3, r4
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xcc>
 8000c0a:	4290      	cmp	r0, r2
 8000c0c:	f0c0 80f0 	bcc.w	8000df0 <__udivmoddi4+0x2ac>
 8000c10:	1a86      	subs	r6, r0, r2
 8000c12:	eb64 0303 	sbc.w	r3, r4, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d0e6      	beq.n	8000bea <__udivmoddi4+0xa6>
 8000c1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c20:	e7e3      	b.n	8000bea <__udivmoddi4+0xa6>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	f040 8090 	bne.w	8000d48 <__udivmoddi4+0x204>
 8000c28:	eba1 040c 	sub.w	r4, r1, ip
 8000c2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c30:	fa1f f78c 	uxth.w	r7, ip
 8000c34:	2101      	movs	r1, #1
 8000c36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c46:	fb07 f006 	mul.w	r0, r7, r6
 8000c4a:	4298      	cmp	r0, r3
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x11c>
 8000c4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x11a>
 8000c58:	4298      	cmp	r0, r3
 8000c5a:	f200 80cd 	bhi.w	8000df8 <__udivmoddi4+0x2b4>
 8000c5e:	4626      	mov	r6, r4
 8000c60:	1a1c      	subs	r4, r3, r0
 8000c62:	fa1f f38e 	uxth.w	r3, lr
 8000c66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000c6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c72:	fb00 f707 	mul.w	r7, r0, r7
 8000c76:	429f      	cmp	r7, r3
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x148>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x146>
 8000c84:	429f      	cmp	r7, r3
 8000c86:	f200 80b0 	bhi.w	8000dea <__udivmoddi4+0x2a6>
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	1bdb      	subs	r3, r3, r7
 8000c8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c92:	e7a5      	b.n	8000be0 <__udivmoddi4+0x9c>
 8000c94:	f1c1 0620 	rsb	r6, r1, #32
 8000c98:	408b      	lsls	r3, r1
 8000c9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c9e:	431f      	orrs	r7, r3
 8000ca0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ca4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ca8:	ea43 030c 	orr.w	r3, r3, ip
 8000cac:	40f4      	lsrs	r4, r6
 8000cae:	fa00 f801 	lsl.w	r8, r0, r1
 8000cb2:	0c38      	lsrs	r0, r7, #16
 8000cb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fb00 441e 	mls	r4, r0, lr, r4
 8000cc4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cc8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ccc:	45a1      	cmp	r9, r4
 8000cce:	fa02 f201 	lsl.w	r2, r2, r1
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x1a6>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cda:	f080 8084 	bcs.w	8000de6 <__udivmoddi4+0x2a2>
 8000cde:	45a1      	cmp	r9, r4
 8000ce0:	f240 8081 	bls.w	8000de6 <__udivmoddi4+0x2a2>
 8000ce4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ce8:	443c      	add	r4, r7
 8000cea:	eba4 0409 	sub.w	r4, r4, r9
 8000cee:	fa1f f983 	uxth.w	r9, r3
 8000cf2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cf6:	fb00 4413 	mls	r4, r0, r3, r4
 8000cfa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cfe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d02:	45a4      	cmp	ip, r4
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x1d2>
 8000d06:	193c      	adds	r4, r7, r4
 8000d08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d0c:	d267      	bcs.n	8000dde <__udivmoddi4+0x29a>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	d965      	bls.n	8000dde <__udivmoddi4+0x29a>
 8000d12:	3b02      	subs	r3, #2
 8000d14:	443c      	add	r4, r7
 8000d16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d1e:	eba4 040c 	sub.w	r4, r4, ip
 8000d22:	429c      	cmp	r4, r3
 8000d24:	46ce      	mov	lr, r9
 8000d26:	469c      	mov	ip, r3
 8000d28:	d351      	bcc.n	8000dce <__udivmoddi4+0x28a>
 8000d2a:	d04e      	beq.n	8000dca <__udivmoddi4+0x286>
 8000d2c:	b155      	cbz	r5, 8000d44 <__udivmoddi4+0x200>
 8000d2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d32:	eb64 040c 	sbc.w	r4, r4, ip
 8000d36:	fa04 f606 	lsl.w	r6, r4, r6
 8000d3a:	40cb      	lsrs	r3, r1
 8000d3c:	431e      	orrs	r6, r3
 8000d3e:	40cc      	lsrs	r4, r1
 8000d40:	e9c5 6400 	strd	r6, r4, [r5]
 8000d44:	2100      	movs	r1, #0
 8000d46:	e750      	b.n	8000bea <__udivmoddi4+0xa6>
 8000d48:	f1c2 0320 	rsb	r3, r2, #32
 8000d4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000d50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d54:	fa24 f303 	lsr.w	r3, r4, r3
 8000d58:	4094      	lsls	r4, r2
 8000d5a:	430c      	orrs	r4, r1
 8000d5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d76:	fb00 f107 	mul.w	r1, r0, r7
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	d908      	bls.n	8000d90 <__udivmoddi4+0x24c>
 8000d7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d86:	d22c      	bcs.n	8000de2 <__udivmoddi4+0x29e>
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d92a      	bls.n	8000de2 <__udivmoddi4+0x29e>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	4463      	add	r3, ip
 8000d90:	1a5b      	subs	r3, r3, r1
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da0:	fb01 f307 	mul.w	r3, r1, r7
 8000da4:	42a3      	cmp	r3, r4
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x276>
 8000da8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000db0:	d213      	bcs.n	8000dda <__udivmoddi4+0x296>
 8000db2:	42a3      	cmp	r3, r4
 8000db4:	d911      	bls.n	8000dda <__udivmoddi4+0x296>
 8000db6:	3902      	subs	r1, #2
 8000db8:	4464      	add	r4, ip
 8000dba:	1ae4      	subs	r4, r4, r3
 8000dbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc0:	e739      	b.n	8000c36 <__udivmoddi4+0xf2>
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	e6f0      	b.n	8000ba8 <__udivmoddi4+0x64>
 8000dc6:	4608      	mov	r0, r1
 8000dc8:	e706      	b.n	8000bd8 <__udivmoddi4+0x94>
 8000dca:	45c8      	cmp	r8, r9
 8000dcc:	d2ae      	bcs.n	8000d2c <__udivmoddi4+0x1e8>
 8000dce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dd6:	3801      	subs	r0, #1
 8000dd8:	e7a8      	b.n	8000d2c <__udivmoddi4+0x1e8>
 8000dda:	4631      	mov	r1, r6
 8000ddc:	e7ed      	b.n	8000dba <__udivmoddi4+0x276>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e799      	b.n	8000d16 <__udivmoddi4+0x1d2>
 8000de2:	4630      	mov	r0, r6
 8000de4:	e7d4      	b.n	8000d90 <__udivmoddi4+0x24c>
 8000de6:	46d6      	mov	lr, sl
 8000de8:	e77f      	b.n	8000cea <__udivmoddi4+0x1a6>
 8000dea:	4463      	add	r3, ip
 8000dec:	3802      	subs	r0, #2
 8000dee:	e74d      	b.n	8000c8c <__udivmoddi4+0x148>
 8000df0:	4606      	mov	r6, r0
 8000df2:	4623      	mov	r3, r4
 8000df4:	4608      	mov	r0, r1
 8000df6:	e70f      	b.n	8000c18 <__udivmoddi4+0xd4>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	e730      	b.n	8000c60 <__udivmoddi4+0x11c>
 8000dfe:	bf00      	nop

08000e00 <__aeabi_idiv0>:
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fc50 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f850 	bl	8000eb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f000 f89a 	bl	8000f48 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 fad1 	bl	80013bc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 fb03 	bl	8001428 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <main+0x9c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e28:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <main+0x9c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea0 <main+0x9c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <main+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ea0 <main+0x9c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000e42:	4917      	ldr	r1, [pc, #92]	@ (8000ea0 <main+0x9c>)
 8000e44:	2000      	movs	r0, #0
 8000e46:	f000 fb7b 	bl	8001540 <BSP_COM_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <main+0x50>
  {
    Error_Handler();
 8000e50:	f000 fa18 	bl	8001284 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //measured_voltage += 1.0;
      pwm_value = pid_controller(measured_voltage);
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <main+0xa0>)
 8000e56:	ed93 7b00 	vldr	d7, [r3]
 8000e5a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e5e:	eef0 0a67 	vmov.f32	s1, s15
 8000e62:	f000 f8ad 	bl	8000fc0 <pid_controller>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a0f      	ldr	r2, [pc, #60]	@ (8000ea8 <main+0xa4>)
 8000e6a:	6013      	str	r3, [r2, #0]
      output_voltage = calculate_output_voltage(pwm_value);
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <main+0xa4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff fb23 	bl	80004bc <__aeabi_i2d>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	ec43 2b10 	vmov	d0, r2, r3
 8000e7e:	f000 f9b3 	bl	80011e8 <calculate_output_voltage>
 8000e82:	eeb0 7a40 	vmov.f32	s14, s0
 8000e86:	eef0 7a60 	vmov.f32	s15, s1
 8000e8a:	4b08      	ldr	r3, [pc, #32]	@ (8000eac <main+0xa8>)
 8000e8c:	ed83 7b00 	vstr	d7, [r3]
      measured_voltage = output_voltage;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <main+0xa8>)
 8000e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e96:	4903      	ldr	r1, [pc, #12]	@ (8000ea4 <main+0xa0>)
 8000e98:	e9c1 2300 	strd	r2, r3, [r1]
      pwm_value = pid_controller(measured_voltage);
 8000e9c:	bf00      	nop
 8000e9e:	e7d9      	b.n	8000e54 <main+0x50>
 8000ea0:	20000044 	.word	0x20000044
 8000ea4:	20000088 	.word	0x20000088
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000078 	.word	0x20000078

08000eb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b094      	sub	sp, #80	@ 0x50
 8000eb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	2238      	movs	r2, #56	@ 0x38
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fac5 	bl	800344e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 ff64 	bl	8001da0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000edc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee2:	2340      	movs	r3, #64	@ 0x40
 8000ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eea:	2302      	movs	r3, #2
 8000eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000eee:	2304      	movs	r3, #4
 8000ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ef2:	2355      	movs	r3, #85	@ 0x55
 8000ef4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 fffe 	bl	8001f08 <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f12:	f000 f9b7 	bl	8001284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fafc 	bl	800252c <HAL_RCC_ClockConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f3a:	f000 f9a3 	bl	8001284 <Error_Handler>
  }
}
 8000f3e:	bf00      	nop
 8000f40:	3750      	adds	r7, #80	@ 0x50
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a1a      	ldr	r2, [pc, #104]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b18      	ldr	r3, [pc, #96]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f6a:	4a14      	ldr	r2, [pc, #80]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f6c:	f043 0320 	orr.w	r3, r3, #32
 8000f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f72:	4b12      	ldr	r3, [pc, #72]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f76:	f003 0320 	and.w	r3, r3, #32
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <MX_GPIO_Init+0x74>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <pid_controller>:

/* USER CODE BEGIN 4 */
// PID function to calculate PWM duty cycle (0 to 2000)
int pid_controller(double measured_voltage) {
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b088      	sub	sp, #32
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	ed87 0b00 	vstr	d0, [r7]
	uint32_t current_time = HAL_GetTick();  // Get current time in milliseconds
 8000fca:	f000 fbd3 	bl	8001774 <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]
	double dt = (current_time - prev_time) / 1000.0;  // Convert to seconds
 8000fd0:	4b79      	ldr	r3, [pc, #484]	@ (80011b8 <pid_controller+0x1f8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff fa5f 	bl	800049c <__aeabi_ui2d>
 8000fde:	f04f 0200 	mov.w	r2, #0
 8000fe2:	4b76      	ldr	r3, [pc, #472]	@ (80011bc <pid_controller+0x1fc>)
 8000fe4:	f7ff fbfe 	bl	80007e4 <__aeabi_ddiv>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	460b      	mov	r3, r1
 8000fec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	if (dt <= 0) dt = 0.001;  // Avoid division by zero
 8000ff0:	f04f 0200 	mov.w	r2, #0
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ffc:	f7ff fd44 	bl	8000a88 <__aeabi_dcmple>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d004      	beq.n	8001010 <pid_controller+0x50>
 8001006:	a366      	add	r3, pc, #408	@ (adr r3, 80011a0 <pid_controller+0x1e0>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	    Ki = 0.5;  // Less integral action for large errors
	} else {
	    Ki = 0.02;   // Normal integral action for small errors
	}
*/
    error = VOUT_TARGET - measured_voltage;
 8001010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001014:	f04f 0000 	mov.w	r0, #0
 8001018:	4969      	ldr	r1, [pc, #420]	@ (80011c0 <pid_controller+0x200>)
 800101a:	f7ff f901 	bl	8000220 <__aeabi_dsub>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4968      	ldr	r1, [pc, #416]	@ (80011c4 <pid_controller+0x204>)
 8001024:	e9c1 2300 	strd	r2, r3, [r1]
    //Integral anti-windup at edge cases
    if (pwm_value != PWM_MAX && pwm_value != PWM_MIN) {
 8001028:	4b67      	ldr	r3, [pc, #412]	@ (80011c8 <pid_controller+0x208>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001030:	d018      	beq.n	8001064 <pid_controller+0xa4>
 8001032:	4b65      	ldr	r3, [pc, #404]	@ (80011c8 <pid_controller+0x208>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d014      	beq.n	8001064 <pid_controller+0xa4>
        integral += error * dt;
 800103a:	4b62      	ldr	r3, [pc, #392]	@ (80011c4 <pid_controller+0x204>)
 800103c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001044:	f7ff faa4 	bl	8000590 <__aeabi_dmul>
 8001048:	4602      	mov	r2, r0
 800104a:	460b      	mov	r3, r1
 800104c:	4610      	mov	r0, r2
 800104e:	4619      	mov	r1, r3
 8001050:	4b5e      	ldr	r3, [pc, #376]	@ (80011cc <pid_controller+0x20c>)
 8001052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001056:	f7ff f8e5 	bl	8000224 <__adddf3>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	495b      	ldr	r1, [pc, #364]	@ (80011cc <pid_controller+0x20c>)
 8001060:	e9c1 2300 	strd	r2, r3, [r1]
    }
    if (integral > MAX_INTEGRAL) integral = MAX_INTEGRAL;
 8001064:	4b59      	ldr	r3, [pc, #356]	@ (80011cc <pid_controller+0x20c>)
 8001066:	e9d3 0100 	ldrd	r0, r1, [r3]
 800106a:	a34f      	add	r3, pc, #316	@ (adr r3, 80011a8 <pid_controller+0x1e8>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f7ff fd1e 	bl	8000ab0 <__aeabi_dcmpgt>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d005      	beq.n	8001086 <pid_controller+0xc6>
 800107a:	4954      	ldr	r1, [pc, #336]	@ (80011cc <pid_controller+0x20c>)
 800107c:	a34a      	add	r3, pc, #296	@ (adr r3, 80011a8 <pid_controller+0x1e8>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	e9c1 2300 	strd	r2, r3, [r1]
    if (integral < -MAX_INTEGRAL) integral = -MAX_INTEGRAL;
 8001086:	4b51      	ldr	r3, [pc, #324]	@ (80011cc <pid_controller+0x20c>)
 8001088:	e9d3 0100 	ldrd	r0, r1, [r3]
 800108c:	a348      	add	r3, pc, #288	@ (adr r3, 80011b0 <pid_controller+0x1f0>)
 800108e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001092:	f7ff fcef 	bl	8000a74 <__aeabi_dcmplt>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <pid_controller+0xe8>
 800109c:	494b      	ldr	r1, [pc, #300]	@ (80011cc <pid_controller+0x20c>)
 800109e:	a344      	add	r3, pc, #272	@ (adr r3, 80011b0 <pid_controller+0x1f0>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	e9c1 2300 	strd	r2, r3, [r1]
    derivative =( error - prev_error)/dt;
 80010a8:	4b46      	ldr	r3, [pc, #280]	@ (80011c4 <pid_controller+0x204>)
 80010aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010ae:	4b48      	ldr	r3, [pc, #288]	@ (80011d0 <pid_controller+0x210>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff f8b4 	bl	8000220 <__aeabi_dsub>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010c4:	f7ff fb8e 	bl	80007e4 <__aeabi_ddiv>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4941      	ldr	r1, [pc, #260]	@ (80011d4 <pid_controller+0x214>)
 80010ce:	e9c1 2300 	strd	r2, r3, [r1]
    prev_error = error;
 80010d2:	4b3c      	ldr	r3, [pc, #240]	@ (80011c4 <pid_controller+0x204>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	493d      	ldr	r1, [pc, #244]	@ (80011d0 <pid_controller+0x210>)
 80010da:	e9c1 2300 	strd	r2, r3, [r1]
    // PID Output
    pid_output = (Kp * error) + (Ki * integral) + (Kd * derivative);
 80010de:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <pid_controller+0x204>)
 80010e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010e4:	f04f 0200 	mov.w	r2, #0
 80010e8:	4b3b      	ldr	r3, [pc, #236]	@ (80011d8 <pid_controller+0x218>)
 80010ea:	f7ff fa51 	bl	8000590 <__aeabi_dmul>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4614      	mov	r4, r2
 80010f4:	461d      	mov	r5, r3
 80010f6:	4b35      	ldr	r3, [pc, #212]	@ (80011cc <pid_controller+0x20c>)
 80010f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b36      	ldr	r3, [pc, #216]	@ (80011dc <pid_controller+0x21c>)
 8001102:	f7ff fa45 	bl	8000590 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4620      	mov	r0, r4
 800110c:	4629      	mov	r1, r5
 800110e:	f7ff f889 	bl	8000224 <__adddf3>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4610      	mov	r0, r2
 8001118:	4619      	mov	r1, r3
 800111a:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <pid_controller+0x214>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f7ff f880 	bl	8000224 <__adddf3>
 8001124:	4602      	mov	r2, r0
 8001126:	460b      	mov	r3, r1
 8001128:	492d      	ldr	r1, [pc, #180]	@ (80011e0 <pid_controller+0x220>)
 800112a:	e9c1 2300 	strd	r2, r3, [r1]

    // Convert PID output to PWM range (0-2000)
    int base_pwm = 1000;
 800112e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001132:	60fb      	str	r3, [r7, #12]
    int new_pwm = base_pwm + (int)(pid_output);
 8001134:	4b2a      	ldr	r3, [pc, #168]	@ (80011e0 <pid_controller+0x220>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f7ff fcc1 	bl	8000ac4 <__aeabi_d2iz>
 8001142:	4602      	mov	r2, r0
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4413      	add	r3, r2
 8001148:	617b      	str	r3, [r7, #20]

    // Constrain how fast PWM can change
    if (new_pwm > pwm_value + PWM_STEP_LIMIT) {
 800114a:	4b1f      	ldr	r3, [pc, #124]	@ (80011c8 <pid_controller+0x208>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3364      	adds	r3, #100	@ 0x64
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	429a      	cmp	r2, r3
 8001154:	dd04      	ble.n	8001160 <pid_controller+0x1a0>
        new_pwm = pwm_value + PWM_STEP_LIMIT;
 8001156:	4b1c      	ldr	r3, [pc, #112]	@ (80011c8 <pid_controller+0x208>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	3364      	adds	r3, #100	@ 0x64
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	e009      	b.n	8001174 <pid_controller+0x1b4>
    } else if (new_pwm < pwm_value - PWM_STEP_LIMIT) {
 8001160:	4b19      	ldr	r3, [pc, #100]	@ (80011c8 <pid_controller+0x208>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3b64      	subs	r3, #100	@ 0x64
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	da03      	bge.n	8001174 <pid_controller+0x1b4>
        new_pwm = pwm_value - PWM_STEP_LIMIT;
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <pid_controller+0x208>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b64      	subs	r3, #100	@ 0x64
 8001172:	617b      	str	r3, [r7, #20]
    }
    // Apply limits
    if (new_pwm < PWM_MIN) new_pwm = PWM_MIN;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	2b00      	cmp	r3, #0
 8001178:	da01      	bge.n	800117e <pid_controller+0x1be>
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
    if (new_pwm > PWM_MAX) new_pwm = PWM_MAX;
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001184:	dd02      	ble.n	800118c <pid_controller+0x1cc>
 8001186:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800118a:	617b      	str	r3, [r7, #20]

    pwm_value = new_pwm;
 800118c:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <pid_controller+0x208>)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	6013      	str	r3, [r2, #0]
    return pwm_value;
 8001192:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <pid_controller+0x208>)
 8001194:	681b      	ldr	r3, [r3, #0]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3720      	adds	r7, #32
 800119a:	46bd      	mov	sp, r7
 800119c:	bdb0      	pop	{r4, r5, r7, pc}
 800119e:	bf00      	nop
 80011a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011a4:	3f50624d 	.word	0x3f50624d
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40977000 	.word	0x40977000
 80011b0:	00000000 	.word	0x00000000
 80011b4:	c0977000 	.word	0xc0977000
 80011b8:	20000090 	.word	0x20000090
 80011bc:	408f4000 	.word	0x408f4000
 80011c0:	40580000 	.word	0x40580000
 80011c4:	20000060 	.word	0x20000060
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000068 	.word	0x20000068
 80011d0:	20000058 	.word	0x20000058
 80011d4:	20000070 	.word	0x20000070
 80011d8:	40040000 	.word	0x40040000
 80011dc:	3fe00000 	.word	0x3fe00000
 80011e0:	20000080 	.word	0x20000080
 80011e4:	00000000 	.word	0x00000000

080011e8 <calculate_output_voltage>:
// Function to calculate expected output voltage using the converter gain
double calculate_output_voltage(double pwm_value) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	ed87 0b00 	vstr	d0, [r7]
    double D = pwm_value / 2000.0;  // Convert PWM (0-2000) to duty cycle (0-1.0)
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b20      	ldr	r3, [pc, #128]	@ (8001278 <calculate_output_voltage+0x90>)
 80011f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011fc:	f7ff faf2 	bl	80007e4 <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (D >= 1.0) D = 0.99;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <calculate_output_voltage+0x94>)
 800120e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001212:	f7ff fc43 	bl	8000a9c <__aeabi_dcmpge>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d004      	beq.n	8001226 <calculate_output_voltage+0x3e>
 800121c:	a314      	add	r3, pc, #80	@ (adr r3, 8001270 <calculate_output_voltage+0x88>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double gain = 2.0 / (1.0 - D);  // Boost converter gain equation
 8001226:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800122a:	f04f 0000 	mov.w	r0, #0
 800122e:	4913      	ldr	r1, [pc, #76]	@ (800127c <calculate_output_voltage+0x94>)
 8001230:	f7fe fff6 	bl	8000220 <__aeabi_dsub>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	f04f 0000 	mov.w	r0, #0
 800123c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001240:	f7ff fad0 	bl	80007e4 <__aeabi_ddiv>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	e9c7 2302 	strd	r2, r3, [r7, #8]
    return VIN * gain;             // Assume fixed input voltage = 24V
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <calculate_output_voltage+0x98>)
 8001252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001256:	f7ff f99b 	bl	8000590 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001262:	eeb0 0a47 	vmov.f32	s0, s14
 8001266:	eef0 0a67 	vmov.f32	s1, s15
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	7ae147ae 	.word	0x7ae147ae
 8001274:	3fefae14 	.word	0x3fefae14
 8001278:	409f4000 	.word	0x409f4000
 800127c:	3ff00000 	.word	0x3ff00000
 8001280:	40240000 	.word	0x40240000

08001284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001288:	b672      	cpsid	i
}
 800128a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <Error_Handler+0x8>

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <HAL_MspInit+0x44>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <HAL_MspInit+0x44>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80012a2:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <HAL_MspInit+0x44>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	4a08      	ldr	r2, [pc, #32]	@ (80012d4 <HAL_MspInit+0x44>)
 80012b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <HAL_MspInit+0x44>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012c6:	f000 fe0f 	bl	8001ee8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <NMI_Handler+0x4>

080012e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <MemManage_Handler+0x4>

080012f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <UsageFault_Handler+0x4>

08001300 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132e:	f000 fa0f 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}

08001336 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f8e2 	bl	8001504 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}

08001344 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <SystemInit+0x20>)
 800134a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800134e:	4a05      	ldr	r2, [pc, #20]	@ (8001364 <SystemInit+0x20>)
 8001350:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001354:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001368:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800136a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800136c:	f7ff ffea 	bl	8001344 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480c      	ldr	r0, [pc, #48]	@ (80013a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001372:	490d      	ldr	r1, [pc, #52]	@ (80013a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001374:	4a0d      	ldr	r2, [pc, #52]	@ (80013ac <LoopForever+0xe>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a0a      	ldr	r2, [pc, #40]	@ (80013b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001388:	4c0a      	ldr	r4, [pc, #40]	@ (80013b4 <LoopForever+0x16>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f002 f863 	bl	8003460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139a:	f7ff fd33 	bl	8000e04 <main>

0800139e <LoopForever>:

LoopForever:
    b LoopForever
 800139e:	e7fe      	b.n	800139e <LoopForever>
  ldr   r0, =_estack
 80013a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80013ac:	08003504 	.word	0x08003504
  ldr r2, =_sbss
 80013b0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80013b4:	20000134 	.word	0x20000134

080013b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013b8:	e7fe      	b.n	80013b8 <ADC1_2_IRQHandler>
	...

080013bc <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <BSP_LED_Init+0x64>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ca:	4a15      	ldr	r2, [pc, #84]	@ (8001420 <BSP_LED_Init+0x64>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013d2:	4b13      	ldr	r3, [pc, #76]	@ (8001420 <BSP_LED_Init+0x64>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80013de:	2320      	movs	r3, #32
 80013e0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ea:	2303      	movs	r3, #3
 80013ec:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4a0c      	ldr	r2, [pc, #48]	@ (8001424 <BSP_LED_Init+0x68>)
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	f107 020c 	add.w	r2, r7, #12
 80013fa:	4611      	mov	r1, r2
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fb35 	bl	8001a6c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <BSP_LED_Init+0x68>)
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	2120      	movs	r1, #32
 800140c:	2200      	movs	r2, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f000 fcae 	bl	8001d70 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	20000008 	.word	0x20000008

08001428 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b088      	sub	sp, #32
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	460a      	mov	r2, r1
 8001432:	71fb      	strb	r3, [r7, #7]
 8001434:	4613      	mov	r3, r2
 8001436:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8001438:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <BSP_PB_Init+0xc4>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	4a2b      	ldr	r2, [pc, #172]	@ (80014ec <BSP_PB_Init+0xc4>)
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001444:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <BSP_PB_Init+0xc4>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001448:	f003 0304 	and.w	r3, r3, #4
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8001450:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001454:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001456:	2302      	movs	r3, #2
 8001458:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800145a:	2302      	movs	r3, #2
 800145c:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800145e:	79bb      	ldrb	r3, [r7, #6]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10c      	bne.n	800147e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001468:	79fb      	ldrb	r3, [r7, #7]
 800146a:	4a21      	ldr	r2, [pc, #132]	@ (80014f0 <BSP_PB_Init+0xc8>)
 800146c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001470:	f107 020c 	add.w	r2, r7, #12
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f000 faf8 	bl	8001a6c <HAL_GPIO_Init>
 800147c:	e031      	b.n	80014e2 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800147e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001482:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4a1a      	ldr	r2, [pc, #104]	@ (80014f0 <BSP_PB_Init+0xc8>)
 8001488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800148c:	f107 020c 	add.w	r2, r7, #12
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f000 faea 	bl	8001a6c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4a15      	ldr	r2, [pc, #84]	@ (80014f4 <BSP_PB_Init+0xcc>)
 800149e:	441a      	add	r2, r3
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4915      	ldr	r1, [pc, #84]	@ (80014f8 <BSP_PB_Init+0xd0>)
 80014a4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4610      	mov	r0, r2
 80014ac:	f000 fa9a 	bl	80019e4 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4a0f      	ldr	r2, [pc, #60]	@ (80014f4 <BSP_PB_Init+0xcc>)
 80014b6:	1898      	adds	r0, r3, r2
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4a10      	ldr	r2, [pc, #64]	@ (80014fc <BSP_PB_Init+0xd4>)
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	461a      	mov	r2, r3
 80014c2:	2100      	movs	r1, #0
 80014c4:	f000 fa71 	bl	80019aa <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80014c8:	2028      	movs	r0, #40	@ 0x28
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001500 <BSP_PB_Init+0xd8>)
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	2200      	movs	r2, #0
 80014d4:	4619      	mov	r1, r3
 80014d6:	f000 fa34 	bl	8001942 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80014da:	2328      	movs	r3, #40	@ 0x28
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fa4a 	bl	8001976 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3720      	adds	r7, #32
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40021000 	.word	0x40021000
 80014f0:	2000000c 	.word	0x2000000c
 80014f4:	20000094 	.word	0x20000094
 80014f8:	080034d8 	.word	0x080034d8
 80014fc:	20000014 	.word	0x20000014
 8001500:	20000018 	.word	0x20000018

08001504 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4a04      	ldr	r2, [pc, #16]	@ (8001524 <BSP_PB_IRQHandler+0x20>)
 8001514:	4413      	add	r3, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fa78 	bl	8001a0c <HAL_EXTI_IRQHandler>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000094 	.word	0x20000094

08001528 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d903      	bls.n	800155e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001556:	f06f 0301 	mvn.w	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	e018      	b.n	8001590 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800155e:	79fb      	ldrb	r3, [r7, #7]
 8001560:	2294      	movs	r2, #148	@ 0x94
 8001562:	fb02 f303 	mul.w	r3, r2, r3
 8001566:	4a0d      	ldr	r2, [pc, #52]	@ (800159c <BSP_COM_Init+0x5c>)
 8001568:	4413      	add	r3, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f852 	bl	8001614 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2294      	movs	r2, #148	@ 0x94
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	4a08      	ldr	r2, [pc, #32]	@ (800159c <BSP_COM_Init+0x5c>)
 800157a:	4413      	add	r3, r2
 800157c:	6839      	ldr	r1, [r7, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 f80e 	bl	80015a0 <MX_LPUART1_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800158a:	f06f 0303 	mvn.w	r3, #3
 800158e:	e000      	b.n	8001592 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001590:	68fb      	ldr	r3, [r7, #12]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000009c 	.word	0x2000009c

080015a0 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <MX_LPUART1_Init+0x60>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	220c      	movs	r2, #12
 80015be:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	895b      	ldrh	r3, [r3, #10]
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	891b      	ldrh	r3, [r3, #8]
 80015d6:	461a      	mov	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	899b      	ldrh	r3, [r3, #12]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015ec:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f001 f9b8 	bl	8002964 <HAL_UART_Init>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000010 	.word	0x20000010

08001604 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ff8d 	bl	8001528 <BSP_PB_Callback>
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800161c:	4b22      	ldr	r3, [pc, #136]	@ (80016a8 <COM1_MspInit+0x94>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <COM1_MspInit+0x94>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001628:	4b1f      	ldr	r3, [pc, #124]	@ (80016a8 <COM1_MspInit+0x94>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <COM1_MspInit+0x94>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	4a1b      	ldr	r2, [pc, #108]	@ (80016a8 <COM1_MspInit+0x94>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001640:	4b19      	ldr	r3, [pc, #100]	@ (80016a8 <COM1_MspInit+0x94>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800164c:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <COM1_MspInit+0x94>)
 800164e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001650:	4a15      	ldr	r2, [pc, #84]	@ (80016a8 <COM1_MspInit+0x94>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001658:	4b13      	ldr	r3, [pc, #76]	@ (80016a8 <COM1_MspInit+0x94>)
 800165a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001664:	2304      	movs	r3, #4
 8001666:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001668:	2302      	movs	r3, #2
 800166a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800166c:	2302      	movs	r3, #2
 800166e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001674:	230c      	movs	r3, #12
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001682:	f000 f9f3 	bl	8001a6c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001686:	2308      	movs	r3, #8
 8001688:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800168e:	230c      	movs	r3, #12
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800169c:	f000 f9e6 	bl	8001a6c <HAL_GPIO_Init>
}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b6:	2003      	movs	r0, #3
 80016b8:	f000 f938 	bl	800192c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 f80d 	bl	80016dc <HAL_InitTick>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d002      	beq.n	80016ce <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	e001      	b.n	80016d2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016ce:	f7ff fddf 	bl	8001290 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d2:	79fb      	ldrb	r3, [r7, #7]

}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <HAL_InitTick+0x68>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d022      	beq.n	8001736 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016f0:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_InitTick+0x6c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_InitTick+0x68>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001700:	fbb2 f3f3 	udiv	r3, r2, r3
 8001704:	4618      	mov	r0, r3
 8001706:	f000 f944 	bl	8001992 <HAL_SYSTICK_Config>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10f      	bne.n	8001730 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	d809      	bhi.n	800172a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001716:	2200      	movs	r2, #0
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	f04f 30ff 	mov.w	r0, #4294967295
 800171e:	f000 f910 	bl	8001942 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001722:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_InitTick+0x70>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e007      	b.n	800173a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	73fb      	strb	r3, [r7, #15]
 800172e:	e004      	b.n	800173a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	e001      	b.n	800173a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800173a:	7bfb      	ldrb	r3, [r7, #15]
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000020 	.word	0x20000020
 8001748:	20000004 	.word	0x20000004
 800174c:	2000001c 	.word	0x2000001c

08001750 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b05      	ldr	r3, [pc, #20]	@ (800176c <HAL_IncTick+0x1c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <HAL_IncTick+0x20>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4413      	add	r3, r2
 800175e:	4a03      	ldr	r2, [pc, #12]	@ (800176c <HAL_IncTick+0x1c>)
 8001760:	6013      	str	r3, [r2, #0]
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	20000130 	.word	0x20000130
 8001770:	20000020 	.word	0x20000020

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20000130 	.word	0x20000130

0800178c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017be:	4a04      	ldr	r2, [pc, #16]	@ (80017d0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	@ (80017ec <__NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	db0b      	blt.n	800181a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	f003 021f 	and.w	r2, r3, #31
 8001808:	4907      	ldr	r1, [pc, #28]	@ (8001828 <__NVIC_EnableIRQ+0x38>)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	095b      	lsrs	r3, r3, #5
 8001810:	2001      	movs	r0, #1
 8001812:	fa00 f202 	lsl.w	r2, r0, r2
 8001816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000e100 	.word	0xe000e100

0800182c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	6039      	str	r1, [r7, #0]
 8001836:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001838:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183c:	2b00      	cmp	r3, #0
 800183e:	db0a      	blt.n	8001856 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	b2da      	uxtb	r2, r3
 8001844:	490c      	ldr	r1, [pc, #48]	@ (8001878 <__NVIC_SetPriority+0x4c>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	0112      	lsls	r2, r2, #4
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	440b      	add	r3, r1
 8001850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001854:	e00a      	b.n	800186c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4908      	ldr	r1, [pc, #32]	@ (800187c <__NVIC_SetPriority+0x50>)
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	3b04      	subs	r3, #4
 8001864:	0112      	lsls	r2, r2, #4
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	440b      	add	r3, r1
 800186a:	761a      	strb	r2, [r3, #24]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000e100 	.word	0xe000e100
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b480      	push	{r7}
 8001882:	b089      	sub	sp, #36	@ 0x24
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f1c3 0307 	rsb	r3, r3, #7
 800189a:	2b04      	cmp	r3, #4
 800189c:	bf28      	it	cs
 800189e:	2304      	movcs	r3, #4
 80018a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3304      	adds	r3, #4
 80018a6:	2b06      	cmp	r3, #6
 80018a8:	d902      	bls.n	80018b0 <NVIC_EncodePriority+0x30>
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3b03      	subs	r3, #3
 80018ae:	e000      	b.n	80018b2 <NVIC_EncodePriority+0x32>
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	f04f 32ff 	mov.w	r2, #4294967295
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43da      	mvns	r2, r3
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	401a      	ands	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	fa01 f303 	lsl.w	r3, r1, r3
 80018d2:	43d9      	mvns	r1, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d8:	4313      	orrs	r3, r2
         );
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3724      	adds	r7, #36	@ 0x24
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018f8:	d301      	bcc.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e00f      	b.n	800191e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001928 <SysTick_Config+0x40>)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3b01      	subs	r3, #1
 8001904:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	210f      	movs	r1, #15
 8001908:	f04f 30ff 	mov.w	r0, #4294967295
 800190c:	f7ff ff8e 	bl	800182c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001910:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <SysTick_Config+0x40>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <SysTick_Config+0x40>)
 8001918:	2207      	movs	r2, #7
 800191a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	e000e010 	.word	0xe000e010

0800192c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff29 	bl	800178c <__NVIC_SetPriorityGrouping>
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001942:	b580      	push	{r7, lr}
 8001944:	b086      	sub	sp, #24
 8001946:	af00      	add	r7, sp, #0
 8001948:	4603      	mov	r3, r0
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff40 	bl	80017d4 <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff90 	bl	8001880 <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5f 	bl	800182c <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff33 	bl	80017f0 <__NVIC_EnableIRQ>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa4 	bl	80018e8 <SysTick_Config>
 80019a0:	4603      	mov	r3, r0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80019aa:	b480      	push	{r7}
 80019ac:	b087      	sub	sp, #28
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	460b      	mov	r3, r1
 80019b4:	607a      	str	r2, [r7, #4]
 80019b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80019bc:	7afb      	ldrb	r3, [r7, #11]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d103      	bne.n	80019ca <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	605a      	str	r2, [r3, #4]
      break;
 80019c8:	e005      	b.n	80019d6 <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	75fb      	strb	r3, [r7, #23]
      break;
 80019d4:	bf00      	nop
  }

  return status;
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	371c      	adds	r7, #28
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e003      	b.n	8001a00 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019fe:	2300      	movs	r3, #0
  }
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0c1b      	lsrs	r3, r3, #16
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2201      	movs	r2, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	015a      	lsls	r2, r3, #5
 8001a34:	4b0c      	ldr	r3, [pc, #48]	@ (8001a68 <HAL_EXTI_IRQHandler+0x5c>)
 8001a36:	4413      	add	r3, r2
 8001a38:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d002      	beq.n	8001a5e <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4798      	blx	r3
    }
  }
}
 8001a5e:	bf00      	nop
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40010414 	.word	0x40010414

08001a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a7a:	e15a      	b.n	8001d32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	2101      	movs	r1, #1
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	fa01 f303 	lsl.w	r3, r1, r3
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 814c 	beq.w	8001d2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d005      	beq.n	8001aac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d130      	bne.n	8001b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43db      	mvns	r3, r3
 8001aec:	693a      	ldr	r2, [r7, #16]
 8001aee:	4013      	ands	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 0201 	and.w	r2, r3, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b03      	cmp	r3, #3
 8001b18:	d017      	beq.n	8001b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	2203      	movs	r2, #3
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	689a      	ldr	r2, [r3, #8]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d123      	bne.n	8001b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	08da      	lsrs	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3208      	adds	r2, #8
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	220f      	movs	r2, #15
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	08da      	lsrs	r2, r3, #3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3208      	adds	r2, #8
 8001b98:	6939      	ldr	r1, [r7, #16]
 8001b9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0203 	and.w	r2, r3, #3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80a6 	beq.w	8001d2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be0:	4b5b      	ldr	r3, [pc, #364]	@ (8001d50 <HAL_GPIO_Init+0x2e4>)
 8001be2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001be4:	4a5a      	ldr	r2, [pc, #360]	@ (8001d50 <HAL_GPIO_Init+0x2e4>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bec:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_GPIO_Init+0x2e4>)
 8001bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf8:	4a56      	ldr	r2, [pc, #344]	@ (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	089b      	lsrs	r3, r3, #2
 8001bfe:	3302      	adds	r3, #2
 8001c00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0303 	and.w	r3, r3, #3
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	220f      	movs	r2, #15
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c22:	d01f      	beq.n	8001c64 <HAL_GPIO_Init+0x1f8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a4c      	ldr	r2, [pc, #304]	@ (8001d58 <HAL_GPIO_Init+0x2ec>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d019      	beq.n	8001c60 <HAL_GPIO_Init+0x1f4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d5c <HAL_GPIO_Init+0x2f0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d013      	beq.n	8001c5c <HAL_GPIO_Init+0x1f0>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a4a      	ldr	r2, [pc, #296]	@ (8001d60 <HAL_GPIO_Init+0x2f4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00d      	beq.n	8001c58 <HAL_GPIO_Init+0x1ec>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a49      	ldr	r2, [pc, #292]	@ (8001d64 <HAL_GPIO_Init+0x2f8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0x1e8>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a48      	ldr	r2, [pc, #288]	@ (8001d68 <HAL_GPIO_Init+0x2fc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_GPIO_Init+0x1e4>
 8001c4c:	2305      	movs	r3, #5
 8001c4e:	e00a      	b.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c50:	2306      	movs	r3, #6
 8001c52:	e008      	b.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c54:	2304      	movs	r3, #4
 8001c56:	e006      	b.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e004      	b.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e002      	b.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_GPIO_Init+0x1fa>
 8001c64:	2300      	movs	r3, #0
 8001c66:	697a      	ldr	r2, [r7, #20]
 8001c68:	f002 0203 	and.w	r2, r2, #3
 8001c6c:	0092      	lsls	r2, r2, #2
 8001c6e:	4093      	lsls	r3, r2
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c76:	4937      	ldr	r1, [pc, #220]	@ (8001d54 <HAL_GPIO_Init+0x2e8>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c84:	4b39      	ldr	r3, [pc, #228]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ca8:	4a30      	ldr	r2, [pc, #192]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cae:	4b2f      	ldr	r3, [pc, #188]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001cb0:	68db      	ldr	r3, [r3, #12]
 8001cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cd2:	4a26      	ldr	r2, [pc, #152]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cd8:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d26:	4a11      	ldr	r2, [pc, #68]	@ (8001d6c <HAL_GPIO_Init+0x300>)
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa22 f303 	lsr.w	r3, r2, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f ae9d 	bne.w	8001a7c <HAL_GPIO_Init+0x10>
  }
}
 8001d42:	bf00      	nop
 8001d44:	bf00      	nop
 8001d46:	371c      	adds	r7, #28
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40010000 	.word	0x40010000
 8001d58:	48000400 	.word	0x48000400
 8001d5c:	48000800 	.word	0x48000800
 8001d60:	48000c00 	.word	0x48000c00
 8001d64:	48001000 	.word	0x48001000
 8001d68:	48001400 	.word	0x48001400
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d8c:	e002      	b.n	8001d94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d8e:	887a      	ldrh	r2, [r7, #2]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d141      	bne.n	8001e32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dae:	4b4b      	ldr	r3, [pc, #300]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dba:	d131      	bne.n	8001e20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dbc:	4b47      	ldr	r3, [pc, #284]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dc2:	4a46      	ldr	r2, [pc, #280]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dc8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dcc:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001dd4:	4a41      	ldr	r2, [pc, #260]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dda:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ddc:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2232      	movs	r2, #50	@ 0x32
 8001de2:	fb02 f303 	mul.w	r3, r2, r3
 8001de6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	3301      	adds	r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df2:	e002      	b.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dfa:	4b38      	ldr	r3, [pc, #224]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfc:	695b      	ldr	r3, [r3, #20]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e06:	d102      	bne.n	8001e0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1f2      	bne.n	8001df4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e0e:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e1a:	d158      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e057      	b.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e20:	4b2e      	ldr	r3, [pc, #184]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e26:	4a2d      	ldr	r2, [pc, #180]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e30:	e04d      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e38:	d141      	bne.n	8001ebe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e3a:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e46:	d131      	bne.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e48:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e4e:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e54:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e58:	4b20      	ldr	r3, [pc, #128]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e60:	4a1e      	ldr	r2, [pc, #120]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2232      	movs	r2, #50	@ 0x32
 8001e6e:	fb02 f303 	mul.w	r3, r2, r3
 8001e72:	4a1c      	ldr	r2, [pc, #112]	@ (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e74:	fba2 2303 	umull	r2, r3, r2, r3
 8001e78:	0c9b      	lsrs	r3, r3, #18
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7e:	e002      	b.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e92:	d102      	bne.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f2      	bne.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e9a:	4b10      	ldr	r3, [pc, #64]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea6:	d112      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e011      	b.n	8001ed0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eac:	4b0b      	ldr	r3, [pc, #44]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ebc:	e007      	b.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ebe:	4b07      	ldr	r3, [pc, #28]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec6:	4a05      	ldr	r2, [pc, #20]	@ (8001edc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ecc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef6:	6093      	str	r3, [r2, #8]
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40007000 	.word	0x40007000

08001f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e2fe      	b.n	8002518 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d075      	beq.n	8002012 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f26:	4b97      	ldr	r3, [pc, #604]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f30:	4b94      	ldr	r3, [pc, #592]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	2b0c      	cmp	r3, #12
 8001f3e:	d102      	bne.n	8001f46 <HAL_RCC_OscConfig+0x3e>
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d002      	beq.n	8001f4c <HAL_RCC_OscConfig+0x44>
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d10b      	bne.n	8001f64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f4c:	4b8d      	ldr	r3, [pc, #564]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d05b      	beq.n	8002010 <HAL_RCC_OscConfig+0x108>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d157      	bne.n	8002010 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e2d9      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCC_OscConfig+0x74>
 8001f6e:	4b85      	ldr	r3, [pc, #532]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a84      	ldr	r2, [pc, #528]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f78:	6013      	str	r3, [r2, #0]
 8001f7a:	e01d      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f84:	d10c      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x98>
 8001f86:	4b7f      	ldr	r3, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b7c      	ldr	r3, [pc, #496]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7b      	ldr	r2, [pc, #492]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	e00b      	b.n	8001fb8 <HAL_RCC_OscConfig+0xb0>
 8001fa0:	4b78      	ldr	r3, [pc, #480]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a77      	ldr	r2, [pc, #476]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001faa:	6013      	str	r3, [r2, #0]
 8001fac:	4b75      	ldr	r3, [pc, #468]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a74      	ldr	r2, [pc, #464]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d013      	beq.n	8001fe8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fbd8 	bl	8001774 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fbd4 	bl	8001774 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	@ 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e29e      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fda:	4b6a      	ldr	r3, [pc, #424]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d0f0      	beq.n	8001fc8 <HAL_RCC_OscConfig+0xc0>
 8001fe6:	e014      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff fbc4 	bl	8001774 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff0:	f7ff fbc0 	bl	8001774 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b64      	cmp	r3, #100	@ 0x64
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e28a      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002002:	4b60      	ldr	r3, [pc, #384]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0xe8>
 800200e:	e000      	b.n	8002012 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d075      	beq.n	800210a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201e:	4b59      	ldr	r3, [pc, #356]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 030c 	and.w	r3, r3, #12
 8002026:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002028:	4b56      	ldr	r3, [pc, #344]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002032:	69bb      	ldr	r3, [r7, #24]
 8002034:	2b0c      	cmp	r3, #12
 8002036:	d102      	bne.n	800203e <HAL_RCC_OscConfig+0x136>
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d002      	beq.n	8002044 <HAL_RCC_OscConfig+0x13c>
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d11f      	bne.n	8002084 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002044:	4b4f      	ldr	r3, [pc, #316]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_OscConfig+0x154>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e25d      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b49      	ldr	r3, [pc, #292]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	691b      	ldr	r3, [r3, #16]
 8002068:	061b      	lsls	r3, r3, #24
 800206a:	4946      	ldr	r1, [pc, #280]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002070:	4b45      	ldr	r3, [pc, #276]	@ (8002188 <HAL_RCC_OscConfig+0x280>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fb31 	bl	80016dc <HAL_InitTick>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d043      	beq.n	8002108 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e249      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d023      	beq.n	80020d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800208c:	4b3d      	ldr	r3, [pc, #244]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a3c      	ldr	r2, [pc, #240]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002098:	f7ff fb6c 	bl	8001774 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a0:	f7ff fb68 	bl	8001774 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e232      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b2:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d0f0      	beq.n	80020a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020be:	4b31      	ldr	r3, [pc, #196]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	492d      	ldr	r1, [pc, #180]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
 80020d2:	e01a      	b.n	800210a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e0:	f7ff fb48 	bl	8001774 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e8:	f7ff fb44 	bl	8001774 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e20e      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fa:	4b22      	ldr	r3, [pc, #136]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x1e0>
 8002106:	e000      	b.n	800210a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002108:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d041      	beq.n	800219a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	695b      	ldr	r3, [r3, #20]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d01c      	beq.n	8002158 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211e:	4b19      	ldr	r3, [pc, #100]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002124:	4a17      	ldr	r2, [pc, #92]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7ff fb21 	bl	8001774 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002136:	f7ff fb1d 	bl	8001774 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e1e7      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002148:	4b0e      	ldr	r3, [pc, #56]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 800214a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0ef      	beq.n	8002136 <HAL_RCC_OscConfig+0x22e>
 8002156:	e020      	b.n	800219a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002158:	4b0a      	ldr	r3, [pc, #40]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <HAL_RCC_OscConfig+0x27c>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002168:	f7ff fb04 	bl	8001774 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216e:	e00d      	b.n	800218c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff fb00 	bl	8001774 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d906      	bls.n	800218c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e1ca      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	2000001c 	.word	0x2000001c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800218c:	4b8c      	ldr	r3, [pc, #560]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800218e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1ea      	bne.n	8002170 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80a6 	beq.w	80022f4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a8:	2300      	movs	r3, #0
 80021aa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021ac:	4b84      	ldr	r3, [pc, #528]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_OscConfig+0x2b4>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <HAL_RCC_OscConfig+0x2b6>
 80021bc:	2300      	movs	r3, #0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021c2:	4b7f      	ldr	r3, [pc, #508]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	4a7e      	ldr	r2, [pc, #504]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ce:	4b7c      	ldr	r3, [pc, #496]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80021d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021de:	4b79      	ldr	r3, [pc, #484]	@ (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d118      	bne.n	800221c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021ea:	4b76      	ldr	r3, [pc, #472]	@ (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a75      	ldr	r2, [pc, #468]	@ (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7ff fabd 	bl	8001774 <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fe:	f7ff fab9 	bl	8001774 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e183      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002210:	4b6c      	ldr	r3, [pc, #432]	@ (80023c4 <HAL_RCC_OscConfig+0x4bc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_RCC_OscConfig+0x32e>
 8002224:	4b66      	ldr	r3, [pc, #408]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800222a:	4a65      	ldr	r2, [pc, #404]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002234:	e024      	b.n	8002280 <HAL_RCC_OscConfig+0x378>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b05      	cmp	r3, #5
 800223c:	d110      	bne.n	8002260 <HAL_RCC_OscConfig+0x358>
 800223e:	4b60      	ldr	r3, [pc, #384]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002244:	4a5e      	ldr	r2, [pc, #376]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002246:	f043 0304 	orr.w	r3, r3, #4
 800224a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800224e:	4b5c      	ldr	r3, [pc, #368]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002254:	4a5a      	ldr	r2, [pc, #360]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800225e:	e00f      	b.n	8002280 <HAL_RCC_OscConfig+0x378>
 8002260:	4b57      	ldr	r3, [pc, #348]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002266:	4a56      	ldr	r2, [pc, #344]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	f023 0301 	bic.w	r3, r3, #1
 800226c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002270:	4b53      	ldr	r3, [pc, #332]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002276:	4a52      	ldr	r2, [pc, #328]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d016      	beq.n	80022b6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002288:	f7ff fa74 	bl	8001774 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228e:	e00a      	b.n	80022a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002290:	f7ff fa70 	bl	8001774 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e138      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a6:	4b46      	ldr	r3, [pc, #280]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ed      	beq.n	8002290 <HAL_RCC_OscConfig+0x388>
 80022b4:	e015      	b.n	80022e2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7ff fa5d 	bl	8001774 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff fa59 	bl	8001774 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e121      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d4:	4b3a      	ldr	r3, [pc, #232]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1ed      	bne.n	80022be <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e2:	7ffb      	ldrb	r3, [r7, #31]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d105      	bne.n	80022f4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e8:	4b35      	ldr	r3, [pc, #212]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ec:	4a34      	ldr	r2, [pc, #208]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80022ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0320 	and.w	r3, r3, #32
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d03c      	beq.n	800237a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01c      	beq.n	8002342 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002308:	4b2d      	ldr	r3, [pc, #180]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800230a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800230e:	4a2c      	ldr	r2, [pc, #176]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff fa2c 	bl	8001774 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002320:	f7ff fa28 	bl	8001774 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0f2      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002332:	4b23      	ldr	r3, [pc, #140]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002334:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0ef      	beq.n	8002320 <HAL_RCC_OscConfig+0x418>
 8002340:	e01b      	b.n	800237a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002342:	4b1f      	ldr	r3, [pc, #124]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002344:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002348:	4a1d      	ldr	r2, [pc, #116]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800234a:	f023 0301 	bic.w	r3, r3, #1
 800234e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002352:	f7ff fa0f 	bl	8001774 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800235a:	f7ff fa0b 	bl	8001774 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0d5      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800236c:	4b14      	ldr	r3, [pc, #80]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1ef      	bne.n	800235a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80c9 	beq.w	8002516 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002384:	4b0e      	ldr	r3, [pc, #56]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 030c 	and.w	r3, r3, #12
 800238c:	2b0c      	cmp	r3, #12
 800238e:	f000 8083 	beq.w	8002498 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d15e      	bne.n	8002458 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <HAL_RCC_OscConfig+0x4b8>)
 80023a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7ff f9e5 	bl	8001774 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	e00c      	b.n	80023c8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ae:	f7ff f9e1 	bl	8001774 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d905      	bls.n	80023c8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e0ab      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c8:	4b55      	ldr	r3, [pc, #340]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1ec      	bne.n	80023ae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d4:	4b52      	ldr	r3, [pc, #328]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b52      	ldr	r3, [pc, #328]	@ (8002524 <HAL_RCC_OscConfig+0x61c>)
 80023da:	4013      	ands	r3, r2
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6a11      	ldr	r1, [r2, #32]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023e4:	3a01      	subs	r2, #1
 80023e6:	0112      	lsls	r2, r2, #4
 80023e8:	4311      	orrs	r1, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80023ee:	0212      	lsls	r2, r2, #8
 80023f0:	4311      	orrs	r1, r2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80023f6:	0852      	lsrs	r2, r2, #1
 80023f8:	3a01      	subs	r2, #1
 80023fa:	0552      	lsls	r2, r2, #21
 80023fc:	4311      	orrs	r1, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002402:	0852      	lsrs	r2, r2, #1
 8002404:	3a01      	subs	r2, #1
 8002406:	0652      	lsls	r2, r2, #25
 8002408:	4311      	orrs	r1, r2
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800240e:	06d2      	lsls	r2, r2, #27
 8002410:	430a      	orrs	r2, r1
 8002412:	4943      	ldr	r1, [pc, #268]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 8002414:	4313      	orrs	r3, r2
 8002416:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002418:	4b41      	ldr	r3, [pc, #260]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a40      	ldr	r2, [pc, #256]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 800241e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002422:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002424:	4b3e      	ldr	r3, [pc, #248]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a3d      	ldr	r2, [pc, #244]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7ff f9a0 	bl	8001774 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7ff f99c 	bl	8001774 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e066      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800244a:	4b35      	ldr	r3, [pc, #212]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x530>
 8002456:	e05e      	b.n	8002516 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b31      	ldr	r3, [pc, #196]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a30      	ldr	r2, [pc, #192]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7ff f986 	bl	8001774 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7ff f982 	bl	8001774 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04c      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247e:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800248a:	4b25      	ldr	r3, [pc, #148]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 800248c:	68da      	ldr	r2, [r3, #12]
 800248e:	4924      	ldr	r1, [pc, #144]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 8002490:	4b25      	ldr	r3, [pc, #148]	@ (8002528 <HAL_RCC_OscConfig+0x620>)
 8002492:	4013      	ands	r3, r2
 8002494:	60cb      	str	r3, [r1, #12]
 8002496:	e03e      	b.n	8002516 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e039      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002520 <HAL_RCC_OscConfig+0x618>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	f003 0203 	and.w	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a1b      	ldr	r3, [r3, #32]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d12c      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c2:	3b01      	subs	r3, #1
 80024c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d123      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11b      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d113      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	3b01      	subs	r3, #1
 800250c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250e:	429a      	cmp	r2, r3
 8002510:	d001      	beq.n	8002516 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e000      	b.n	8002518 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	019f800c 	.word	0x019f800c
 8002528:	feeefffc 	.word	0xfeeefffc

0800252c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e11e      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b91      	ldr	r3, [pc, #580]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d910      	bls.n	8002574 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b8e      	ldr	r3, [pc, #568]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 020f 	bic.w	r2, r3, #15
 800255a:	498c      	ldr	r1, [pc, #560]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b8a      	ldr	r3, [pc, #552]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e106      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d073      	beq.n	8002668 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d129      	bne.n	80025dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002588:	4b81      	ldr	r3, [pc, #516]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0f4      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002598:	f000 f99e 	bl	80028d8 <RCC_GetSysClockFreqFromPLLSource>
 800259c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4a7c      	ldr	r2, [pc, #496]	@ (8002794 <HAL_RCC_ClockConfig+0x268>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d93f      	bls.n	8002626 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d009      	beq.n	80025c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d033      	beq.n	8002626 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d12f      	bne.n	8002626 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025c6:	4b72      	ldr	r3, [pc, #456]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025ce:	4a70      	ldr	r2, [pc, #448]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025d6:	2380      	movs	r3, #128	@ 0x80
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e024      	b.n	8002626 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d107      	bne.n	80025f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d109      	bne.n	8002604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0c6      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f4:	4b66      	ldr	r3, [pc, #408]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0be      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002604:	f000 f8ce 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002608:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4a61      	ldr	r2, [pc, #388]	@ (8002794 <HAL_RCC_ClockConfig+0x268>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d909      	bls.n	8002626 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002612:	4b5f      	ldr	r3, [pc, #380]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800261a:	4a5d      	ldr	r2, [pc, #372]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 800261c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002620:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002622:	2380      	movs	r3, #128	@ 0x80
 8002624:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b5a      	ldr	r3, [pc, #360]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4957      	ldr	r1, [pc, #348]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002638:	f7ff f89c 	bl	8001774 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7ff f898 	bl	8001774 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e095      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b4e      	ldr	r3, [pc, #312]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d023      	beq.n	80026bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d005      	beq.n	800268c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002680:	4b43      	ldr	r3, [pc, #268]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	4a42      	ldr	r2, [pc, #264]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002686:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800268a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002698:	4b3d      	ldr	r3, [pc, #244]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80026a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80026a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a8:	4b39      	ldr	r3, [pc, #228]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	4936      	ldr	r1, [pc, #216]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	608b      	str	r3, [r1, #8]
 80026ba:	e008      	b.n	80026ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b80      	cmp	r3, #128	@ 0x80
 80026c0:	d105      	bne.n	80026ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026c2:	4b33      	ldr	r3, [pc, #204]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4a32      	ldr	r2, [pc, #200]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ce:	4b2f      	ldr	r3, [pc, #188]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 030f 	and.w	r3, r3, #15
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d21d      	bcs.n	8002718 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f023 020f 	bic.w	r2, r3, #15
 80026e4:	4929      	ldr	r1, [pc, #164]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026ec:	f7ff f842 	bl	8001774 <HAL_GetTick>
 80026f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f2:	e00a      	b.n	800270a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f4:	f7ff f83e 	bl	8001774 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002702:	4293      	cmp	r3, r2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e03b      	b.n	8002782 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270a:	4b20      	ldr	r3, [pc, #128]	@ (800278c <HAL_RCC_ClockConfig+0x260>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d1ed      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d008      	beq.n	8002736 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002724:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	4917      	ldr	r1, [pc, #92]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d009      	beq.n	8002756 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002742:	4b13      	ldr	r3, [pc, #76]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	490f      	ldr	r1, [pc, #60]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002756:	f000 f825 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 800275a:	4602      	mov	r2, r0
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <HAL_RCC_ClockConfig+0x264>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 030f 	and.w	r3, r3, #15
 8002766:	490c      	ldr	r1, [pc, #48]	@ (8002798 <HAL_RCC_ClockConfig+0x26c>)
 8002768:	5ccb      	ldrb	r3, [r1, r3]
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	fa22 f303 	lsr.w	r3, r2, r3
 8002772:	4a0a      	ldr	r2, [pc, #40]	@ (800279c <HAL_RCC_ClockConfig+0x270>)
 8002774:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002776:	4b0a      	ldr	r3, [pc, #40]	@ (80027a0 <HAL_RCC_ClockConfig+0x274>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fe ffae 	bl	80016dc <HAL_InitTick>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40022000 	.word	0x40022000
 8002790:	40021000 	.word	0x40021000
 8002794:	04c4b400 	.word	0x04c4b400
 8002798:	080034c0 	.word	0x080034c0
 800279c:	20000004 	.word	0x20000004
 80027a0:	2000001c 	.word	0x2000001c

080027a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027aa:	4b2c      	ldr	r3, [pc, #176]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 030c 	and.w	r3, r3, #12
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d102      	bne.n	80027bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	e047      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027bc:	4b27      	ldr	r3, [pc, #156]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d102      	bne.n	80027ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c8:	4b26      	ldr	r3, [pc, #152]	@ (8002864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	e03e      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027ce:	4b23      	ldr	r3, [pc, #140]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f003 030c 	and.w	r3, r3, #12
 80027d6:	2b0c      	cmp	r3, #12
 80027d8:	d136      	bne.n	8002848 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027da:	4b20      	ldr	r3, [pc, #128]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	091b      	lsrs	r3, r3, #4
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3301      	adds	r3, #1
 80027f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002864 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002800:	4a16      	ldr	r2, [pc, #88]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002802:	68d2      	ldr	r2, [r2, #12]
 8002804:	0a12      	lsrs	r2, r2, #8
 8002806:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800280a:	fb02 f303 	mul.w	r3, r2, r3
 800280e:	617b      	str	r3, [r7, #20]
      break;
 8002810:	e00c      	b.n	800282c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002812:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4a10      	ldr	r2, [pc, #64]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 800281c:	68d2      	ldr	r2, [r2, #12]
 800281e:	0a12      	lsrs	r2, r2, #8
 8002820:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
      break;
 800282a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_RCC_GetSysClockFreq+0xb8>)
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	0e5b      	lsrs	r3, r3, #25
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	3301      	adds	r3, #1
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	e001      	b.n	800284c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800284c:	693b      	ldr	r3, [r7, #16]
}
 800284e:	4618      	mov	r0, r3
 8002850:	371c      	adds	r7, #28
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	40021000 	.word	0x40021000
 8002860:	00f42400 	.word	0x00f42400
 8002864:	016e3600 	.word	0x016e3600

08002868 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800286c:	4b03      	ldr	r3, [pc, #12]	@ (800287c <HAL_RCC_GetHCLKFreq+0x14>)
 800286e:	681b      	ldr	r3, [r3, #0]
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	20000004 	.word	0x20000004

08002880 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002884:	f7ff fff0 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 8002888:	4602      	mov	r2, r0
 800288a:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	f003 0307 	and.w	r3, r3, #7
 8002894:	4904      	ldr	r1, [pc, #16]	@ (80028a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002896:	5ccb      	ldrb	r3, [r1, r3]
 8002898:	f003 031f 	and.w	r3, r3, #31
 800289c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40021000 	.word	0x40021000
 80028a8:	080034d0 	.word	0x080034d0

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028b0:	f7ff ffda 	bl	8002868 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b06      	ldr	r3, [pc, #24]	@ (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0adb      	lsrs	r3, r3, #11
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4904      	ldr	r1, [pc, #16]	@ (80028d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	f003 031f 	and.w	r3, r3, #31
 80028c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	080034d0 	.word	0x080034d0

080028d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028de:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d10c      	bne.n	8002916 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028fc:	4a17      	ldr	r2, [pc, #92]	@ (800295c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	4a14      	ldr	r2, [pc, #80]	@ (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002906:	68d2      	ldr	r2, [r2, #12]
 8002908:	0a12      	lsrs	r2, r2, #8
 800290a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
    break;
 8002914:	e00c      	b.n	8002930 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4a0e      	ldr	r2, [pc, #56]	@ (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	0a12      	lsrs	r2, r2, #8
 8002924:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    break;
 800292e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0e5b      	lsrs	r3, r3, #25
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800294a:	687b      	ldr	r3, [r7, #4]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000
 800295c:	016e3600 	.word	0x016e3600
 8002960:	00f42400 	.word	0x00f42400

08002964 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e042      	b.n	80029fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297c:	2b00      	cmp	r3, #0
 800297e:	d106      	bne.n	800298e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f83b 	bl	8002a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2224      	movs	r2, #36	@ 0x24
 8002992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 0201 	bic.w	r2, r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 fb2e 	bl	8003010 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f82f 	bl	8002a18 <UART_SetConfig>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e01b      	b.n	80029fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fbad 	bl	8003154 <UART_CheckIdleState>
 80029fa:	4603      	mov	r3, r0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3708      	adds	r7, #8
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b08c      	sub	sp, #48	@ 0x30
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	431a      	orrs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	4baa      	ldr	r3, [pc, #680]	@ (8002cf0 <UART_SetConfig+0x2d8>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6812      	ldr	r2, [r2, #0]
 8002a4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a50:	430b      	orrs	r3, r1
 8002a52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a9f      	ldr	r2, [pc, #636]	@ (8002cf4 <UART_SetConfig+0x2dc>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a80:	4313      	orrs	r3, r2
 8002a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002a8e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	6812      	ldr	r2, [r2, #0]
 8002a96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa2:	f023 010f 	bic.w	r1, r3, #15
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a90      	ldr	r2, [pc, #576]	@ (8002cf8 <UART_SetConfig+0x2e0>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d125      	bne.n	8002b08 <UART_SetConfig+0xf0>
 8002abc:	4b8f      	ldr	r3, [pc, #572]	@ (8002cfc <UART_SetConfig+0x2e4>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d81a      	bhi.n	8002b00 <UART_SetConfig+0xe8>
 8002aca:	a201      	add	r2, pc, #4	@ (adr r2, 8002ad0 <UART_SetConfig+0xb8>)
 8002acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad0:	08002ae1 	.word	0x08002ae1
 8002ad4:	08002af1 	.word	0x08002af1
 8002ad8:	08002ae9 	.word	0x08002ae9
 8002adc:	08002af9 	.word	0x08002af9
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae6:	e116      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aee:	e112      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002af0:	2304      	movs	r3, #4
 8002af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af6:	e10e      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002af8:	2308      	movs	r3, #8
 8002afa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002afe:	e10a      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002b00:	2310      	movs	r3, #16
 8002b02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b06:	e106      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a7c      	ldr	r2, [pc, #496]	@ (8002d00 <UART_SetConfig+0x2e8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d138      	bne.n	8002b84 <UART_SetConfig+0x16c>
 8002b12:	4b7a      	ldr	r3, [pc, #488]	@ (8002cfc <UART_SetConfig+0x2e4>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	f003 030c 	and.w	r3, r3, #12
 8002b1c:	2b0c      	cmp	r3, #12
 8002b1e:	d82d      	bhi.n	8002b7c <UART_SetConfig+0x164>
 8002b20:	a201      	add	r2, pc, #4	@ (adr r2, 8002b28 <UART_SetConfig+0x110>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002b5d 	.word	0x08002b5d
 8002b2c:	08002b7d 	.word	0x08002b7d
 8002b30:	08002b7d 	.word	0x08002b7d
 8002b34:	08002b7d 	.word	0x08002b7d
 8002b38:	08002b6d 	.word	0x08002b6d
 8002b3c:	08002b7d 	.word	0x08002b7d
 8002b40:	08002b7d 	.word	0x08002b7d
 8002b44:	08002b7d 	.word	0x08002b7d
 8002b48:	08002b65 	.word	0x08002b65
 8002b4c:	08002b7d 	.word	0x08002b7d
 8002b50:	08002b7d 	.word	0x08002b7d
 8002b54:	08002b7d 	.word	0x08002b7d
 8002b58:	08002b75 	.word	0x08002b75
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b62:	e0d8      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002b64:	2302      	movs	r3, #2
 8002b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b6a:	e0d4      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b72:	e0d0      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002b74:	2308      	movs	r3, #8
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b7a:	e0cc      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b82:	e0c8      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a5e      	ldr	r2, [pc, #376]	@ (8002d04 <UART_SetConfig+0x2ec>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d125      	bne.n	8002bda <UART_SetConfig+0x1c2>
 8002b8e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cfc <UART_SetConfig+0x2e4>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b94:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002b98:	2b30      	cmp	r3, #48	@ 0x30
 8002b9a:	d016      	beq.n	8002bca <UART_SetConfig+0x1b2>
 8002b9c:	2b30      	cmp	r3, #48	@ 0x30
 8002b9e:	d818      	bhi.n	8002bd2 <UART_SetConfig+0x1ba>
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d00a      	beq.n	8002bba <UART_SetConfig+0x1a2>
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d814      	bhi.n	8002bd2 <UART_SetConfig+0x1ba>
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <UART_SetConfig+0x19a>
 8002bac:	2b10      	cmp	r3, #16
 8002bae:	d008      	beq.n	8002bc2 <UART_SetConfig+0x1aa>
 8002bb0:	e00f      	b.n	8002bd2 <UART_SetConfig+0x1ba>
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bb8:	e0ad      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc0:	e0a9      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bc8:	e0a5      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002bca:	2308      	movs	r3, #8
 8002bcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd0:	e0a1      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002bd2:	2310      	movs	r3, #16
 8002bd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bd8:	e09d      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a4a      	ldr	r2, [pc, #296]	@ (8002d08 <UART_SetConfig+0x2f0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d125      	bne.n	8002c30 <UART_SetConfig+0x218>
 8002be4:	4b45      	ldr	r3, [pc, #276]	@ (8002cfc <UART_SetConfig+0x2e4>)
 8002be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bea:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002bee:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bf0:	d016      	beq.n	8002c20 <UART_SetConfig+0x208>
 8002bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002bf4:	d818      	bhi.n	8002c28 <UART_SetConfig+0x210>
 8002bf6:	2b80      	cmp	r3, #128	@ 0x80
 8002bf8:	d00a      	beq.n	8002c10 <UART_SetConfig+0x1f8>
 8002bfa:	2b80      	cmp	r3, #128	@ 0x80
 8002bfc:	d814      	bhi.n	8002c28 <UART_SetConfig+0x210>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d002      	beq.n	8002c08 <UART_SetConfig+0x1f0>
 8002c02:	2b40      	cmp	r3, #64	@ 0x40
 8002c04:	d008      	beq.n	8002c18 <UART_SetConfig+0x200>
 8002c06:	e00f      	b.n	8002c28 <UART_SetConfig+0x210>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c0e:	e082      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c10:	2302      	movs	r3, #2
 8002c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c16:	e07e      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c1e:	e07a      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c20:	2308      	movs	r3, #8
 8002c22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c26:	e076      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c28:	2310      	movs	r3, #16
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c2e:	e072      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a35      	ldr	r2, [pc, #212]	@ (8002d0c <UART_SetConfig+0x2f4>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d12a      	bne.n	8002c90 <UART_SetConfig+0x278>
 8002c3a:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <UART_SetConfig+0x2e4>)
 8002c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c48:	d01a      	beq.n	8002c80 <UART_SetConfig+0x268>
 8002c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002c4e:	d81b      	bhi.n	8002c88 <UART_SetConfig+0x270>
 8002c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c54:	d00c      	beq.n	8002c70 <UART_SetConfig+0x258>
 8002c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c5a:	d815      	bhi.n	8002c88 <UART_SetConfig+0x270>
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <UART_SetConfig+0x250>
 8002c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c64:	d008      	beq.n	8002c78 <UART_SetConfig+0x260>
 8002c66:	e00f      	b.n	8002c88 <UART_SetConfig+0x270>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c6e:	e052      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c70:	2302      	movs	r3, #2
 8002c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c76:	e04e      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c7e:	e04a      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c80:	2308      	movs	r3, #8
 8002c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c86:	e046      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c88:	2310      	movs	r3, #16
 8002c8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c8e:	e042      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a17      	ldr	r2, [pc, #92]	@ (8002cf4 <UART_SetConfig+0x2dc>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d13a      	bne.n	8002d10 <UART_SetConfig+0x2f8>
 8002c9a:	4b18      	ldr	r3, [pc, #96]	@ (8002cfc <UART_SetConfig+0x2e4>)
 8002c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ca4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ca8:	d01a      	beq.n	8002ce0 <UART_SetConfig+0x2c8>
 8002caa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002cae:	d81b      	bhi.n	8002ce8 <UART_SetConfig+0x2d0>
 8002cb0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cb4:	d00c      	beq.n	8002cd0 <UART_SetConfig+0x2b8>
 8002cb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002cba:	d815      	bhi.n	8002ce8 <UART_SetConfig+0x2d0>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <UART_SetConfig+0x2b0>
 8002cc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cc4:	d008      	beq.n	8002cd8 <UART_SetConfig+0x2c0>
 8002cc6:	e00f      	b.n	8002ce8 <UART_SetConfig+0x2d0>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cce:	e022      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cd6:	e01e      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002cd8:	2304      	movs	r3, #4
 8002cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cde:	e01a      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002ce0:	2308      	movs	r3, #8
 8002ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce6:	e016      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002ce8:	2310      	movs	r3, #16
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cee:	e012      	b.n	8002d16 <UART_SetConfig+0x2fe>
 8002cf0:	cfff69f3 	.word	0xcfff69f3
 8002cf4:	40008000 	.word	0x40008000
 8002cf8:	40013800 	.word	0x40013800
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	40004400 	.word	0x40004400
 8002d04:	40004800 	.word	0x40004800
 8002d08:	40004c00 	.word	0x40004c00
 8002d0c:	40005000 	.word	0x40005000
 8002d10:	2310      	movs	r3, #16
 8002d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4aae      	ldr	r2, [pc, #696]	@ (8002fd4 <UART_SetConfig+0x5bc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 8097 	bne.w	8002e50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d823      	bhi.n	8002d72 <UART_SetConfig+0x35a>
 8002d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002d30 <UART_SetConfig+0x318>)
 8002d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d30:	08002d55 	.word	0x08002d55
 8002d34:	08002d73 	.word	0x08002d73
 8002d38:	08002d5d 	.word	0x08002d5d
 8002d3c:	08002d73 	.word	0x08002d73
 8002d40:	08002d63 	.word	0x08002d63
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d73 	.word	0x08002d73
 8002d4c:	08002d73 	.word	0x08002d73
 8002d50:	08002d6b 	.word	0x08002d6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d54:	f7ff fd94 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8002d58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d5a:	e010      	b.n	8002d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d5c:	4b9e      	ldr	r3, [pc, #632]	@ (8002fd8 <UART_SetConfig+0x5c0>)
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d60:	e00d      	b.n	8002d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d62:	f7ff fd1f 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002d66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002d68:	e009      	b.n	8002d7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002d70:	e005      	b.n	8002d7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002d7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8130 	beq.w	8002fe6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	4a94      	ldr	r2, [pc, #592]	@ (8002fdc <UART_SetConfig+0x5c4>)
 8002d8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d90:	461a      	mov	r2, r3
 8002d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d305      	bcc.n	8002db6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d903      	bls.n	8002dbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002dbc:	e113      	b.n	8002fe6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	60fa      	str	r2, [r7, #12]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dca:	4a84      	ldr	r2, [pc, #528]	@ (8002fdc <UART_SetConfig+0x5c4>)
 8002dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	603b      	str	r3, [r7, #0]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ddc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002de0:	f7fd fe98 	bl	8000b14 <__aeabi_uldivmod>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	020b      	lsls	r3, r1, #8
 8002df6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002dfa:	0202      	lsls	r2, r0, #8
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	6849      	ldr	r1, [r1, #4]
 8002e00:	0849      	lsrs	r1, r1, #1
 8002e02:	2000      	movs	r0, #0
 8002e04:	460c      	mov	r4, r1
 8002e06:	4605      	mov	r5, r0
 8002e08:	eb12 0804 	adds.w	r8, r2, r4
 8002e0c:	eb43 0905 	adc.w	r9, r3, r5
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	469a      	mov	sl, r3
 8002e18:	4693      	mov	fp, r2
 8002e1a:	4652      	mov	r2, sl
 8002e1c:	465b      	mov	r3, fp
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fe77 	bl	8000b14 <__aeabi_uldivmod>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e34:	d308      	bcc.n	8002e48 <UART_SetConfig+0x430>
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e3c:	d204      	bcs.n	8002e48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a3a      	ldr	r2, [r7, #32]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	e0ce      	b.n	8002fe6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e4e:	e0ca      	b.n	8002fe6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e58:	d166      	bne.n	8002f28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002e5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d827      	bhi.n	8002eb2 <UART_SetConfig+0x49a>
 8002e62:	a201      	add	r2, pc, #4	@ (adr r2, 8002e68 <UART_SetConfig+0x450>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e8d 	.word	0x08002e8d
 8002e6c:	08002e95 	.word	0x08002e95
 8002e70:	08002e9d 	.word	0x08002e9d
 8002e74:	08002eb3 	.word	0x08002eb3
 8002e78:	08002ea3 	.word	0x08002ea3
 8002e7c:	08002eb3 	.word	0x08002eb3
 8002e80:	08002eb3 	.word	0x08002eb3
 8002e84:	08002eb3 	.word	0x08002eb3
 8002e88:	08002eab 	.word	0x08002eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e8c:	f7ff fcf8 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8002e90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e92:	e014      	b.n	8002ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e94:	f7ff fd0a 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8002e98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e9a:	e010      	b.n	8002ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e9c:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd8 <UART_SetConfig+0x5c0>)
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ea0:	e00d      	b.n	8002ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea2:	f7ff fc7f 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002ea6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ea8:	e009      	b.n	8002ebe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002eb0:	e005      	b.n	8002ebe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ebc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8090 	beq.w	8002fe6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	4a44      	ldr	r2, [pc, #272]	@ (8002fdc <UART_SetConfig+0x5c4>)
 8002ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ed8:	005a      	lsls	r2, r3, #1
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	441a      	add	r2, r3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	2b0f      	cmp	r3, #15
 8002ef0:	d916      	bls.n	8002f20 <UART_SetConfig+0x508>
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef8:	d212      	bcs.n	8002f20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f023 030f 	bic.w	r3, r3, #15
 8002f02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	8bfb      	ldrh	r3, [r7, #30]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	8bfa      	ldrh	r2, [r7, #30]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	e062      	b.n	8002fe6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f26:	e05e      	b.n	8002fe6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f28:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d828      	bhi.n	8002f82 <UART_SetConfig+0x56a>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <UART_SetConfig+0x520>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f5d 	.word	0x08002f5d
 8002f3c:	08002f65 	.word	0x08002f65
 8002f40:	08002f6d 	.word	0x08002f6d
 8002f44:	08002f83 	.word	0x08002f83
 8002f48:	08002f73 	.word	0x08002f73
 8002f4c:	08002f83 	.word	0x08002f83
 8002f50:	08002f83 	.word	0x08002f83
 8002f54:	08002f83 	.word	0x08002f83
 8002f58:	08002f7b 	.word	0x08002f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f5c:	f7ff fc90 	bl	8002880 <HAL_RCC_GetPCLK1Freq>
 8002f60:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f62:	e014      	b.n	8002f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f64:	f7ff fca2 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8002f68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f6a:	e010      	b.n	8002f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <UART_SetConfig+0x5c0>)
 8002f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f70:	e00d      	b.n	8002f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f72:	f7ff fc17 	bl	80027a4 <HAL_RCC_GetSysClockFreq>
 8002f76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002f78:	e009      	b.n	8002f8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002f80:	e005      	b.n	8002f8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002f82:	2300      	movs	r3, #0
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f8c:	bf00      	nop
    }

    if (pclk != 0U)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d028      	beq.n	8002fe6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	4a10      	ldr	r2, [pc, #64]	@ (8002fdc <UART_SetConfig+0x5c4>)
 8002f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	441a      	add	r2, r3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	d910      	bls.n	8002fe0 <UART_SetConfig+0x5c8>
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc4:	d20c      	bcs.n	8002fe0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fc6:	6a3b      	ldr	r3, [r7, #32]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	e009      	b.n	8002fe6 <UART_SetConfig+0x5ce>
 8002fd2:	bf00      	nop
 8002fd4:	40008000 	.word	0x40008000
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	080034dc 	.word	0x080034dc
      }
      else
      {
        ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2200      	movs	r2, #0
 8003000:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003002:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003006:	4618      	mov	r0, r3
 8003008:	3730      	adds	r7, #48	@ 0x30
 800300a:	46bd      	mov	sp, r7
 800300c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00a      	beq.n	800303a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00a      	beq.n	800305c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00a      	beq.n	800307e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003082:	f003 0304 	and.w	r3, r3, #4
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d01a      	beq.n	8003126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800310e:	d10a      	bne.n	8003126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800312a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  }
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b098      	sub	sp, #96	@ 0x60
 8003158:	af02      	add	r7, sp, #8
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003164:	f7fe fb06 	bl	8001774 <HAL_GetTick>
 8003168:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b08      	cmp	r3, #8
 8003176:	d12f      	bne.n	80031d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003178:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003180:	2200      	movs	r2, #0
 8003182:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f88e 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d022      	beq.n	80031d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800319a:	e853 3f00 	ldrex	r3, [r3]
 800319e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80031b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031b8:	e841 2300 	strex	r3, r2, [r1]
 80031bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1e6      	bne.n	8003192 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e063      	b.n	80032a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d149      	bne.n	800327a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ee:	2200      	movs	r2, #0
 80031f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f857 	bl	80032a8 <UART_WaitOnFlagUntilTimeout>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d03c      	beq.n	800327a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	e853 3f00 	ldrex	r3, [r3]
 800320c:	623b      	str	r3, [r7, #32]
   return(result);
 800320e:	6a3b      	ldr	r3, [r7, #32]
 8003210:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003214:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800321e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003220:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003222:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003226:	e841 2300 	strex	r3, r2, [r1]
 800322a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800322c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e6      	bne.n	8003200 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	e853 3f00 	ldrex	r3, [r3]
 8003240:	60fb      	str	r3, [r7, #12]
   return(result);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f023 0301 	bic.w	r3, r3, #1
 8003248:	64bb      	str	r3, [r7, #72]	@ 0x48
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3308      	adds	r3, #8
 8003250:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003252:	61fa      	str	r2, [r7, #28]
 8003254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	69b9      	ldr	r1, [r7, #24]
 8003258:	69fa      	ldr	r2, [r7, #28]
 800325a:	e841 2300 	strex	r3, r2, [r1]
 800325e:	617b      	str	r3, [r7, #20]
   return(result);
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1e5      	bne.n	8003232 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2220      	movs	r2, #32
 800326a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e012      	b.n	80032a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3758      	adds	r7, #88	@ 0x58
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	4613      	mov	r3, r2
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b8:	e04f      	b.n	800335a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d04b      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fe fa57 	bl	8001774 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d302      	bcc.n	80032d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e04e      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d037      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0xb2>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b80      	cmp	r3, #128	@ 0x80
 80032ee:	d034      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0xb2>
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b40      	cmp	r3, #64	@ 0x40
 80032f4:	d031      	beq.n	800335a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d110      	bne.n	8003326 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2208      	movs	r2, #8
 800330a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f838 	bl	8003382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2208      	movs	r2, #8
 8003316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e029      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003334:	d111      	bne.n	800335a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800333e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 f81e 	bl	8003382 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2220      	movs	r2, #32
 800334a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e00f      	b.n	800337a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	429a      	cmp	r2, r3
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	429a      	cmp	r2, r3
 8003376:	d0a0      	beq.n	80032ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003382:	b480      	push	{r7}
 8003384:	b095      	sub	sp, #84	@ 0x54
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80033aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80033ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e6      	bne.n	800338a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3308      	adds	r3, #8
 80033c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	f023 0301 	bic.w	r3, r3, #1
 80033d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3308      	adds	r3, #8
 80033de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033e8:	e841 2300 	strex	r3, r2, [r1]
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1e3      	bne.n	80033bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d118      	bne.n	800342e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	60bb      	str	r3, [r7, #8]
   return(result);
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	f023 0310 	bic.w	r3, r3, #16
 8003410:	647b      	str	r3, [r7, #68]	@ 0x44
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	461a      	mov	r2, r3
 8003418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341a:	61bb      	str	r3, [r7, #24]
 800341c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341e:	6979      	ldr	r1, [r7, #20]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	e841 2300 	strex	r3, r2, [r1]
 8003426:	613b      	str	r3, [r7, #16]
   return(result);
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1e6      	bne.n	80033fc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003442:	bf00      	nop
 8003444:	3754      	adds	r7, #84	@ 0x54
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <memset>:
 800344e:	4402      	add	r2, r0
 8003450:	4603      	mov	r3, r0
 8003452:	4293      	cmp	r3, r2
 8003454:	d100      	bne.n	8003458 <memset+0xa>
 8003456:	4770      	bx	lr
 8003458:	f803 1b01 	strb.w	r1, [r3], #1
 800345c:	e7f9      	b.n	8003452 <memset+0x4>
	...

08003460 <__libc_init_array>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	4d0d      	ldr	r5, [pc, #52]	@ (8003498 <__libc_init_array+0x38>)
 8003464:	4c0d      	ldr	r4, [pc, #52]	@ (800349c <__libc_init_array+0x3c>)
 8003466:	1b64      	subs	r4, r4, r5
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	2600      	movs	r6, #0
 800346c:	42a6      	cmp	r6, r4
 800346e:	d109      	bne.n	8003484 <__libc_init_array+0x24>
 8003470:	4d0b      	ldr	r5, [pc, #44]	@ (80034a0 <__libc_init_array+0x40>)
 8003472:	4c0c      	ldr	r4, [pc, #48]	@ (80034a4 <__libc_init_array+0x44>)
 8003474:	f000 f818 	bl	80034a8 <_init>
 8003478:	1b64      	subs	r4, r4, r5
 800347a:	10a4      	asrs	r4, r4, #2
 800347c:	2600      	movs	r6, #0
 800347e:	42a6      	cmp	r6, r4
 8003480:	d105      	bne.n	800348e <__libc_init_array+0x2e>
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	f855 3b04 	ldr.w	r3, [r5], #4
 8003488:	4798      	blx	r3
 800348a:	3601      	adds	r6, #1
 800348c:	e7ee      	b.n	800346c <__libc_init_array+0xc>
 800348e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003492:	4798      	blx	r3
 8003494:	3601      	adds	r6, #1
 8003496:	e7f2      	b.n	800347e <__libc_init_array+0x1e>
 8003498:	080034fc 	.word	0x080034fc
 800349c:	080034fc 	.word	0x080034fc
 80034a0:	080034fc 	.word	0x080034fc
 80034a4:	08003500 	.word	0x08003500

080034a8 <_init>:
 80034a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034aa:	bf00      	nop
 80034ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ae:	bc08      	pop	{r3}
 80034b0:	469e      	mov	lr, r3
 80034b2:	4770      	bx	lr

080034b4 <_fini>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr
