
G4-closed-loop-software-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080056ac  080056ac  000066ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056e0  080056e0  00007020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080056e0  080056e0  000066e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056e8  080056e8  00007020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e8  080056e8  000066e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  080056f0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000020  08005710  00007020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08005710  00007204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007020  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171a1  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b7f  00000000  00000000  0001e1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e0  00000000  00000000  00020d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001044  00000000  00000000  00022250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028b18  00000000  00000000  00023294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a4b  00000000  00000000  0004bdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113085  00000000  00000000  000637f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017687c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a7c  00000000  00000000  001768c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0017c33c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005694 	.word	0x08005694

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08005694 	.word	0x08005694

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000548:	f000 fcf0 	bl	8000f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f834 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f9b4 	bl	80008bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000554:	f000 f988 	bl	8000868 <MX_DMA_Init>
  MX_TIM1_Init();
 8000558:	f000 f8f2 	bl	8000740 <MX_TIM1_Init>
  MX_ADC1_Init();
 800055c:	f000 f878 	bl	8000650 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000560:	2100      	movs	r1, #0
 8000562:	4813      	ldr	r0, [pc, #76]	@ (80005b0 <main+0x6c>)
 8000564:	f003 fba0 	bl	8003ca8 <HAL_TIM_PWM_Start>
  //HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
  //HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&value_adc,1);
  /* USER CODE END 2 */

  /* Initialize led */
  BSP_LED_Init(LED_GREEN);
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fb67 	bl	8000c3c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800056e:	2101      	movs	r1, #1
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fb99 	bl	8000ca8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <main+0x70>)
 8000578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800057c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800057e:	4b0d      	ldr	r3, [pc, #52]	@ (80005b4 <main+0x70>)
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000584:	4b0b      	ldr	r3, [pc, #44]	@ (80005b4 <main+0x70>)
 8000586:	2200      	movs	r2, #0
 8000588:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800058a:	4b0a      	ldr	r3, [pc, #40]	@ (80005b4 <main+0x70>)
 800058c:	2200      	movs	r2, #0
 800058e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <main+0x70>)
 8000592:	2200      	movs	r2, #0
 8000594:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000596:	4907      	ldr	r1, [pc, #28]	@ (80005b4 <main+0x70>)
 8000598:	2000      	movs	r0, #0
 800059a:	f000 fc11 	bl	8000dc0 <BSP_COM_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <main+0x66>
  {
    Error_Handler();
 80005a4:	f000 f9c6 	bl	8000934 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	e7fd      	b.n	80005aa <main+0x66>
 80005ae:	bf00      	nop
 80005b0:	20000118 	.word	0x20000118
 80005b4:	2000003c 	.word	0x2000003c

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2238      	movs	r2, #56	@ 0x38
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 f837 	bl	800563a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005de:	f002 fadb 	bl	8002b98 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e2:	2302      	movs	r3, #2
 80005e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	2340      	movs	r3, #64	@ 0x40
 80005ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f0:	2302      	movs	r3, #2
 80005f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 25;
 80005fc:	2319      	movs	r3, #25
 80005fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000600:	2302      	movs	r3, #2
 8000602:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0318 	add.w	r3, r7, #24
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fb75 	bl	8002d00 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x68>
  {
    Error_Handler();
 800061c:	f000 f98a 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2303      	movs	r3, #3
 8000626:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2103      	movs	r1, #3
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fe73 	bl	8003324 <HAL_RCC_ClockConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000644:	f000 f976 	bl	8000934 <Error_Handler>
  }
}
 8000648:	bf00      	nop
 800064a:	3750      	adds	r7, #80	@ 0x50
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	@ 0x30
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2220      	movs	r2, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f004 ffe6 	bl	800563a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800066e:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <MX_ADC1_Init+0xe8>)
 8000670:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000674:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8000676:	4b30      	ldr	r3, [pc, #192]	@ (8000738 <MX_ADC1_Init+0xe8>)
 8000678:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 800067c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067e:	4b2e      	ldr	r3, [pc, #184]	@ (8000738 <MX_ADC1_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000684:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <MX_ADC1_Init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800068a:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <MX_ADC1_Init+0xe8>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000690:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <MX_ADC1_Init+0xe8>)
 8000692:	2200      	movs	r2, #0
 8000694:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <MX_ADC1_Init+0xe8>)
 8000698:	2204      	movs	r2, #4
 800069a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069c:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <MX_ADC1_Init+0xe8>)
 800069e:	2200      	movs	r2, #0
 80006a0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80006a2:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006a8:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80006d0:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d8:	4817      	ldr	r0, [pc, #92]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006da:	f000 fe6d 	bl	80013b8 <HAL_ADC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80006e4:	f000 f926 	bl	8000934 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f0:	4619      	mov	r1, r3
 80006f2:	4811      	ldr	r0, [pc, #68]	@ (8000738 <MX_ADC1_Init+0xe8>)
 80006f4:	f001 fc82 	bl	8001ffc <HAL_ADCEx_MultiModeConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006fe:	f000 f919 	bl	8000934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_ADC1_Init+0xec>)
 8000704:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000706:	2306      	movs	r3, #6
 8000708:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_92CYCLES_5;
 800070a:	2305      	movs	r3, #5
 800070c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800070e:	237f      	movs	r3, #127	@ 0x7f
 8000710:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000712:	2304      	movs	r3, #4
 8000714:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	@ (8000738 <MX_ADC1_Init+0xe8>)
 8000720:	f001 f806 	bl	8001730 <HAL_ADC_ConfigChannel>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800072a:	f000 f903 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	@ 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	2000004c 	.word	0x2000004c
 800073c:	19200040 	.word	0x19200040

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b098      	sub	sp, #96	@ 0x60
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
 8000762:	615a      	str	r2, [r3, #20]
 8000764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	2234      	movs	r2, #52	@ 0x34
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f004 ff64 	bl	800563a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000772:	4b3b      	ldr	r3, [pc, #236]	@ (8000860 <MX_TIM1_Init+0x120>)
 8000774:	4a3b      	ldr	r2, [pc, #236]	@ (8000864 <MX_TIM1_Init+0x124>)
 8000776:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000778:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <MX_TIM1_Init+0x120>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b38      	ldr	r3, [pc, #224]	@ (8000860 <MX_TIM1_Init+0x120>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000784:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <MX_TIM1_Init+0x120>)
 8000786:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800078a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b34      	ldr	r3, [pc, #208]	@ (8000860 <MX_TIM1_Init+0x120>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <MX_TIM1_Init+0x120>)
 8000794:	2200      	movs	r2, #0
 8000796:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000798:	4b31      	ldr	r3, [pc, #196]	@ (8000860 <MX_TIM1_Init+0x120>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800079e:	4830      	ldr	r0, [pc, #192]	@ (8000860 <MX_TIM1_Init+0x120>)
 80007a0:	f003 fa2a 	bl	8003bf8 <HAL_TIM_PWM_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80007aa:	f000 f8c3 	bl	8000934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ae:	2300      	movs	r3, #0
 80007b0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007be:	4619      	mov	r1, r3
 80007c0:	4827      	ldr	r0, [pc, #156]	@ (8000860 <MX_TIM1_Init+0x120>)
 80007c2:	f004 f89b 	bl	80048fc <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007cc:	f000 f8b2 	bl	8000934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d0:	2360      	movs	r3, #96	@ 0x60
 80007d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 1000;
 80007d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007da:	2300      	movs	r3, #0
 80007dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007de:	2300      	movs	r3, #0
 80007e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	481a      	ldr	r0, [pc, #104]	@ (8000860 <MX_TIM1_Init+0x120>)
 80007f8:	f003 fb68 	bl	8003ecc <HAL_TIM_PWM_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000802:	f000 f897 	bl	8000934 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800081a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800082c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	4807      	ldr	r0, [pc, #28]	@ (8000860 <MX_TIM1_Init+0x120>)
 8000844:	f004 f8f0 	bl	8004a28 <HAL_TIMEx_ConfigBreakDeadTime>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800084e:	f000 f871 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000852:	4803      	ldr	r0, [pc, #12]	@ (8000860 <MX_TIM1_Init+0x120>)
 8000854:	f000 f93c 	bl	8000ad0 <HAL_TIM_MspPostInit>

}
 8000858:	bf00      	nop
 800085a:	3760      	adds	r7, #96	@ 0x60
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20000118 	.word	0x20000118
 8000864:	40012c00 	.word	0x40012c00

08000868 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800086e:	4b12      	ldr	r3, [pc, #72]	@ (80008b8 <MX_DMA_Init+0x50>)
 8000870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <MX_DMA_Init+0x50>)
 8000874:	f043 0304 	orr.w	r3, r3, #4
 8000878:	6493      	str	r3, [r2, #72]	@ 0x48
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <MX_DMA_Init+0x50>)
 800087c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800087e:	f003 0304 	and.w	r3, r3, #4
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <MX_DMA_Init+0x50>)
 8000888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800088a:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <MX_DMA_Init+0x50>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6493      	str	r3, [r2, #72]	@ 0x48
 8000892:	4b09      	ldr	r3, [pc, #36]	@ (80008b8 <MX_DMA_Init+0x50>)
 8000894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	200b      	movs	r0, #11
 80008a4:	f001 fd8d 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008a8:	200b      	movs	r0, #11
 80008aa:	f001 fda4 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40021000 	.word	0x40021000

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008c8:	f043 0304 	orr.w	r3, r3, #4
 80008cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008ce:	4b18      	ldr	r3, [pc, #96]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d2:	f003 0304 	and.w	r3, r3, #4
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008da:	4b15      	ldr	r3, [pc, #84]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	4a14      	ldr	r2, [pc, #80]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008e0:	f043 0320 	orr.w	r3, r3, #32
 80008e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e6:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0320 	and.w	r3, r3, #32
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000930 <MX_GPIO_Init+0x74>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <MX_GPIO_Init+0x74>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b09      	ldr	r3, [pc, #36]	@ (8000930 <MX_GPIO_Init+0x74>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800090e:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <MX_GPIO_Init+0x74>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <MX_GPIO_Init+0x74>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3714      	adds	r7, #20
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	40021000 	.word	0x40021000

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <Error_Handler+0x8>

08000940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	@ (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	@ (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	@ 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	@ (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	@ 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000976:	f002 f9b3 	bl	8002ce0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b09e      	sub	sp, #120	@ 0x78
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0310 	add.w	r3, r7, #16
 80009a4:	2254      	movs	r2, #84	@ 0x54
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 fe46 	bl	800563a <memset>
  if(hadc->Instance==ADC1)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009b6:	d15e      	bne.n	8000a76 <HAL_ADC_MspInit+0xee>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80009b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009bc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80009be:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009c2:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	f107 0310 	add.w	r3, r7, #16
 80009c8:	4618      	mov	r0, r3
 80009ca:	f002 fec7 	bl	800375c <HAL_RCCEx_PeriphCLKConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80009d4:	f7ff ffae 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80009d8:	4b29      	ldr	r3, [pc, #164]	@ (8000a80 <HAL_ADC_MspInit+0xf8>)
 80009da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009dc:	4a28      	ldr	r2, [pc, #160]	@ (8000a80 <HAL_ADC_MspInit+0xf8>)
 80009de:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009e4:	4b26      	ldr	r3, [pc, #152]	@ (8000a80 <HAL_ADC_MspInit+0xf8>)
 80009e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f0:	4b23      	ldr	r3, [pc, #140]	@ (8000a80 <HAL_ADC_MspInit+0xf8>)
 80009f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f4:	4a22      	ldr	r2, [pc, #136]	@ (8000a80 <HAL_ADC_MspInit+0xf8>)
 80009f6:	f043 0304 	orr.w	r3, r3, #4
 80009fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009fc:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <HAL_ADC_MspInit+0xf8>)
 80009fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a00:	f003 0304 	and.w	r3, r3, #4
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a14:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a18:	4619      	mov	r1, r3
 8000a1a:	481a      	ldr	r0, [pc, #104]	@ (8000a84 <HAL_ADC_MspInit+0xfc>)
 8000a1c:	f001 ff22 	bl	8002864 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000a20:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a22:	4a1a      	ldr	r2, [pc, #104]	@ (8000a8c <HAL_ADC_MspInit+0x104>)
 8000a24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a28:	2205      	movs	r2, #5
 8000a2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a2c:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a44:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a4c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a50:	2220      	movs	r2, #32
 8000a52:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a5a:	480b      	ldr	r0, [pc, #44]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a5c:	f001 fce6 	bl	800242c <HAL_DMA_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_ADC_MspInit+0xe2>
    {
      Error_Handler();
 8000a66:	f7ff ff65 	bl	8000934 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a06      	ldr	r2, [pc, #24]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a6e:	655a      	str	r2, [r3, #84]	@ 0x54
 8000a70:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <HAL_ADC_MspInit+0x100>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a76:	bf00      	nop
 8000a78:	3778      	adds	r7, #120	@ 0x78
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000
 8000a84:	48000800 	.word	0x48000800
 8000a88:	200000b8 	.word	0x200000b8
 8000a8c:	40020008 	.word	0x40020008

08000a90 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac8 <HAL_TIM_PWM_MspInit+0x38>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d10b      	bne.n	8000aba <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8000acc <HAL_TIM_PWM_MspInit+0x3c>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa6:	4a09      	ldr	r2, [pc, #36]	@ (8000acc <HAL_TIM_PWM_MspInit+0x3c>)
 8000aa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000aac:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <HAL_TIM_PWM_MspInit+0x3c>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ab2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <HAL_TIM_MspPostInit+0x68>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d11d      	bne.n	8000b2e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af2:	4b12      	ldr	r3, [pc, #72]	@ (8000b3c <HAL_TIM_MspPostInit+0x6c>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a11      	ldr	r2, [pc, #68]	@ (8000b3c <HAL_TIM_MspPostInit+0x6c>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <HAL_TIM_MspPostInit+0x6c>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000b1c:	2306      	movs	r3, #6
 8000b1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2a:	f001 fe9b 	bl	8002864 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b2e:	bf00      	nop
 8000b30:	3720      	adds	r7, #32
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40012c00 	.word	0x40012c00
 8000b3c:	40021000 	.word	0x40021000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <NMI_Handler+0x4>

08000b48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <MemManage_Handler+0x4>

08000b58 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <BusFault_Handler+0x4>

08000b60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b96:	f000 fa1b 	bl	8000fd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000ba4:	4802      	ldr	r0, [pc, #8]	@ (8000bb0 <DMA1_Channel1_IRQHandler+0x10>)
 8000ba6:	f001 fce9 	bl	800257c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200000b8 	.word	0x200000b8

08000bb4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f8e3 	bl	8000d84 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be8:	480d      	ldr	r0, [pc, #52]	@ (8000c20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopForever+0xe>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopForever+0x16>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c16:	f004 fd19 	bl	800564c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff fc93 	bl	8000544 <main>

08000c1e <LoopForever>:

LoopForever:
    b LoopForever
 8000c1e:	e7fe      	b.n	8000c1e <LoopForever>
  ldr   r0, =_estack
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c2c:	080056f0 	.word	0x080056f0
  ldr r2, =_sbss
 8000c30:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c34:	20000204 	.word	0x20000204

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 8000c46:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <BSP_LED_Init+0x64>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4a:	4a15      	ldr	r2, [pc, #84]	@ (8000ca0 <BSP_LED_Init+0x64>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c52:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <BSP_LED_Init+0x64>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 8000c5e:	2320      	movs	r3, #32
 8000c60:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca4 <BSP_LED_Init+0x68>)
 8000c72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c76:	f107 020c 	add.w	r2, r7, #12
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fdf1 	bl	8002864 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <BSP_LED_Init+0x68>)
 8000c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f001 ff6a 	bl	8002b68 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3720      	adds	r7, #32
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	20000004 	.word	0x20000004

08000ca8 <BSP_PB_Init>:
  *           @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                  with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	460a      	mov	r2, r1
 8000cb2:	71fb      	strb	r3, [r7, #7]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {USER_BUTTON_EXTI_LINE};

  /* Enable the BUTTON Clock */
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d6c <BSP_PB_Init+0xc4>)
 8000cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d6c <BSP_PB_Init+0xc4>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cc4:	4b29      	ldr	r3, [pc, #164]	@ (8000d6c <BSP_PB_Init+0xc4>)
 8000cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000cd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cd4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000cde:	79bb      	ldrb	r3, [r7, #6]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d10c      	bne.n	8000cfe <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4a21      	ldr	r2, [pc, #132]	@ (8000d70 <BSP_PB_Init+0xc8>)
 8000cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf0:	f107 020c 	add.w	r2, r7, #12
 8000cf4:	4611      	mov	r1, r2
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f001 fdb4 	bl	8002864 <HAL_GPIO_Init>
 8000cfc:	e031      	b.n	8000d62 <BSP_PB_Init+0xba>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000cfe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d02:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	4a1a      	ldr	r2, [pc, #104]	@ (8000d70 <BSP_PB_Init+0xc8>)
 8000d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d0c:	f107 020c 	add.w	r2, r7, #12
 8000d10:	4611      	mov	r1, r2
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fda6 	bl	8002864 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4a15      	ldr	r2, [pc, #84]	@ (8000d74 <BSP_PB_Init+0xcc>)
 8000d1e:	441a      	add	r2, r3
 8000d20:	79fb      	ldrb	r3, [r7, #7]
 8000d22:	4915      	ldr	r1, [pc, #84]	@ (8000d78 <BSP_PB_Init+0xd0>)
 8000d24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4610      	mov	r0, r2
 8000d2c:	f001 fd55 	bl	80027da <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000d30:	79fb      	ldrb	r3, [r7, #7]
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4a0f      	ldr	r2, [pc, #60]	@ (8000d74 <BSP_PB_Init+0xcc>)
 8000d36:	1898      	adds	r0, r3, r2
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4a10      	ldr	r2, [pc, #64]	@ (8000d7c <BSP_PB_Init+0xd4>)
 8000d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d40:	461a      	mov	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f001 fd2c 	bl	80027a0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000d48:	2028      	movs	r0, #40	@ 0x28
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <BSP_PB_Init+0xd8>)
 8000d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d52:	2200      	movs	r2, #0
 8000d54:	4619      	mov	r1, r3
 8000d56:	f001 fb34 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000d5a:	2328      	movs	r3, #40	@ 0x28
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 fb4a 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000d62:	2300      	movs	r3, #0
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000164 	.word	0x20000164
 8000d78:	080056c4 	.word	0x080056c4
 8000d7c:	20000010 	.word	0x20000010
 8000d80:	20000014 	.word	0x20000014

08000d84 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4a04      	ldr	r2, [pc, #16]	@ (8000da4 <BSP_PB_IRQHandler+0x20>)
 8000d94:	4413      	add	r3, r2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fd34 	bl	8002804 <HAL_EXTI_IRQHandler>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20000164 	.word	0x20000164

08000da8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d903      	bls.n	8000dde <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000dd6:	f06f 0301 	mvn.w	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e018      	b.n	8000e10 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2294      	movs	r2, #148	@ 0x94
 8000de2:	fb02 f303 	mul.w	r3, r2, r3
 8000de6:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <BSP_COM_Init+0x5c>)
 8000de8:	4413      	add	r3, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f852 	bl	8000e94 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2294      	movs	r2, #148	@ 0x94
 8000df4:	fb02 f303 	mul.w	r3, r2, r3
 8000df8:	4a08      	ldr	r2, [pc, #32]	@ (8000e1c <BSP_COM_Init+0x5c>)
 8000dfa:	4413      	add	r3, r2
 8000dfc:	6839      	ldr	r1, [r7, #0]
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f80e 	bl	8000e20 <MX_LPUART1_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d002      	beq.n	8000e10 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8000e0a:	f06f 0303 	mvn.w	r3, #3
 8000e0e:	e000      	b.n	8000e12 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8000e10:	68fb      	ldr	r3, [r7, #12]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	2000016c 	.word	0x2000016c

08000e20 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <MX_LPUART1_Init+0x60>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	220c      	movs	r2, #12
 8000e3e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	895b      	ldrh	r3, [r3, #10]
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685a      	ldr	r2, [r3, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	891b      	ldrh	r3, [r3, #8]
 8000e56:	461a      	mov	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	899b      	ldrh	r3, [r3, #12]
 8000e60:	461a      	mov	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e6c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f003 fe6e 	bl	8004b50 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000000c 	.word	0x2000000c

08000e84 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ff8d 	bl	8000da8 <BSP_PB_Callback>
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b08a      	sub	sp, #40	@ 0x28
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000e9c:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <COM1_MspInit+0x94>)
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	4a21      	ldr	r2, [pc, #132]	@ (8000f28 <COM1_MspInit+0x94>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <COM1_MspInit+0x94>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
 8000eb2:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <COM1_MspInit+0x94>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000f28 <COM1_MspInit+0x94>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <COM1_MspInit+0x94>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <COM1_MspInit+0x94>)
 8000ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ed0:	4a15      	ldr	r2, [pc, #84]	@ (8000f28 <COM1_MspInit+0x94>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ed8:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <COM1_MspInit+0x94>)
 8000eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000eec:	2302      	movs	r3, #2
 8000eee:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000ef4:	230c      	movs	r3, #12
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f02:	f001 fcaf 	bl	8002864 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000f06:	2308      	movs	r3, #8
 8000f08:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000f0e:	230c      	movs	r3, #12
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f1c:	f001 fca2 	bl	8002864 <HAL_GPIO_Init>
}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	@ 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40021000 	.word	0x40021000

08000f2c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f36:	2003      	movs	r0, #3
 8000f38:	f001 fa38 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f000 f80d 	bl	8000f5c <HAL_InitTick>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d002      	beq.n	8000f4e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	e001      	b.n	8000f52 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f4e:	f7ff fcf7 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f52:	79fb      	ldrb	r3, [r7, #7]

}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <HAL_InitTick+0x68>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d022      	beq.n	8000fb6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f70:	4b15      	ldr	r3, [pc, #84]	@ (8000fc8 <HAL_InitTick+0x6c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <HAL_InitTick+0x68>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000f7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f80:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fa44 	bl	8002412 <HAL_SYSTICK_Config>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d10f      	bne.n	8000fb0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b0f      	cmp	r3, #15
 8000f94:	d809      	bhi.n	8000faa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	2200      	movs	r2, #0
 8000f98:	6879      	ldr	r1, [r7, #4]
 8000f9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9e:	f001 fa10 	bl	80023c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <HAL_InitTick+0x70>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6013      	str	r3, [r2, #0]
 8000fa8:	e007      	b.n	8000fba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	73fb      	strb	r3, [r7, #15]
 8000fae:	e004      	b.n	8000fba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	e001      	b.n	8000fba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000001c 	.word	0x2000001c
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	20000018 	.word	0x20000018

08000fd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <HAL_IncTick+0x1c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_IncTick+0x20>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a03      	ldr	r2, [pc, #12]	@ (8000fec <HAL_IncTick+0x1c>)
 8000fe0:	6013      	str	r3, [r2, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000200 	.word	0x20000200
 8000ff0:	2000001c 	.word	0x2000001c

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000200 	.word	0x20000200

0800100c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	609a      	str	r2, [r3, #8]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001032:	b480      	push	{r7}
 8001034:	b083      	sub	sp, #12
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	431a      	orrs	r2, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	609a      	str	r2, [r3, #8]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001068:	4618      	mov	r0, r3
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
 8001080:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	3360      	adds	r3, #96	@ 0x60
 8001086:	461a      	mov	r2, r3
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b08      	ldr	r3, [pc, #32]	@ (80010b8 <LL_ADC_SetOffset+0x44>)
 8001096:	4013      	ands	r3, r2
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	4313      	orrs	r3, r2
 80010a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	03fff000 	.word	0x03fff000

080010bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3360      	adds	r3, #96	@ 0x60
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	3360      	adds	r3, #96	@ 0x60
 80010f8:	461a      	mov	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	4413      	add	r3, r2
 8001100:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800111e:	b480      	push	{r7}
 8001120:	b087      	sub	sp, #28
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3360      	adds	r3, #96	@ 0x60
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	431a      	orrs	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001148:	bf00      	nop
 800114a:	371c      	adds	r7, #28
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001154:	b480      	push	{r7}
 8001156:	b087      	sub	sp, #28
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	3360      	adds	r3, #96	@ 0x60
 8001164:	461a      	mov	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	4413      	add	r3, r2
 800116c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	431a      	orrs	r2, r3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	615a      	str	r2, [r3, #20]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3330      	adds	r3, #48	@ 0x30
 80011c0:	461a      	mov	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	4413      	add	r3, r2
 80011ce:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	f003 031f 	and.w	r3, r3, #31
 80011da:	211f      	movs	r1, #31
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	43db      	mvns	r3, r3
 80011e2:	401a      	ands	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	0e9b      	lsrs	r3, r3, #26
 80011e8:	f003 011f 	and.w	r1, r3, #31
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	431a      	orrs	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011fc:	bf00      	nop
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3314      	adds	r3, #20
 8001218:	461a      	mov	r2, r3
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	0e5b      	lsrs	r3, r3, #25
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	0d1b      	lsrs	r3, r3, #20
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	2107      	movs	r1, #7
 8001236:	fa01 f303 	lsl.w	r3, r1, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	401a      	ands	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	0d1b      	lsrs	r3, r3, #20
 8001242:	f003 031f 	and.w	r3, r3, #31
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	fa01 f303 	lsl.w	r3, r1, r3
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001252:	bf00      	nop
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001278:	43db      	mvns	r3, r3
 800127a:	401a      	ands	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f003 0318 	and.w	r3, r3, #24
 8001282:	4908      	ldr	r1, [pc, #32]	@ (80012a4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001284:	40d9      	lsrs	r1, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	400b      	ands	r3, r1
 800128a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800128e:	431a      	orrs	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	0007ffff 	.word	0x0007ffff

080012a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80012b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6093      	str	r3, [r2, #8]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80012dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001304:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001308:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001330:	d101      	bne.n	8001336 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0301 	and.w	r3, r3, #1
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <LL_ADC_IsEnabled+0x18>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <LL_ADC_IsEnabled+0x1a>
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	2b04      	cmp	r3, #4
 800137c:	d101      	bne.n	8001382 <LL_ADC_REG_IsConversionOngoing+0x18>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d101      	bne.n	80013a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b089      	sub	sp, #36	@ 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e1a9      	b.n	8001726 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fad1 	bl	8000988 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff ff67 	bl	80012cc <LL_ADC_IsDeepPowerDownEnabled>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff4d 	bl	80012a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff82 	bl	800131c <LL_ADC_IsInternalRegulatorEnabled>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d115      	bne.n	800144a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff66 	bl	80012f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001428:	4b9c      	ldr	r3, [pc, #624]	@ (800169c <HAL_ADC_Init+0x2e4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	4a9c      	ldr	r2, [pc, #624]	@ (80016a0 <HAL_ADC_Init+0x2e8>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	3301      	adds	r3, #1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800143c:	e002      	b.n	8001444 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	3b01      	subs	r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f9      	bne.n	800143e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff ff64 	bl	800131c <LL_ADC_IsInternalRegulatorEnabled>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145e:	f043 0210 	orr.w	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff75 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 8001480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 8142 	bne.w	8001714 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 813e 	bne.w	8001714 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800149c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80014a0:	f043 0202 	orr.w	r2, r3, #2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ff49 	bl	8001344 <LL_ADC_IsEnabled>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d141      	bne.n	800153c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014c0:	d004      	beq.n	80014cc <HAL_ADC_Init+0x114>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a77      	ldr	r2, [pc, #476]	@ (80016a4 <HAL_ADC_Init+0x2ec>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d10f      	bne.n	80014ec <HAL_ADC_Init+0x134>
 80014cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80014d0:	f7ff ff38 	bl	8001344 <LL_ADC_IsEnabled>
 80014d4:	4604      	mov	r4, r0
 80014d6:	4873      	ldr	r0, [pc, #460]	@ (80016a4 <HAL_ADC_Init+0x2ec>)
 80014d8:	f7ff ff34 	bl	8001344 <LL_ADC_IsEnabled>
 80014dc:	4603      	mov	r3, r0
 80014de:	4323      	orrs	r3, r4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	e012      	b.n	8001512 <HAL_ADC_Init+0x15a>
 80014ec:	486e      	ldr	r0, [pc, #440]	@ (80016a8 <HAL_ADC_Init+0x2f0>)
 80014ee:	f7ff ff29 	bl	8001344 <LL_ADC_IsEnabled>
 80014f2:	4604      	mov	r4, r0
 80014f4:	486d      	ldr	r0, [pc, #436]	@ (80016ac <HAL_ADC_Init+0x2f4>)
 80014f6:	f7ff ff25 	bl	8001344 <LL_ADC_IsEnabled>
 80014fa:	4603      	mov	r3, r0
 80014fc:	431c      	orrs	r4, r3
 80014fe:	486c      	ldr	r0, [pc, #432]	@ (80016b0 <HAL_ADC_Init+0x2f8>)
 8001500:	f7ff ff20 	bl	8001344 <LL_ADC_IsEnabled>
 8001504:	4603      	mov	r3, r0
 8001506:	4323      	orrs	r3, r4
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d012      	beq.n	800153c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800151e:	d004      	beq.n	800152a <HAL_ADC_Init+0x172>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a5f      	ldr	r2, [pc, #380]	@ (80016a4 <HAL_ADC_Init+0x2ec>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d101      	bne.n	800152e <HAL_ADC_Init+0x176>
 800152a:	4a62      	ldr	r2, [pc, #392]	@ (80016b4 <HAL_ADC_Init+0x2fc>)
 800152c:	e000      	b.n	8001530 <HAL_ADC_Init+0x178>
 800152e:	4a62      	ldr	r2, [pc, #392]	@ (80016b8 <HAL_ADC_Init+0x300>)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f7ff fd68 	bl	800100c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7f5b      	ldrb	r3, [r3, #29]
 8001540:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001546:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800154c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001552:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800155a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800155c:	4313      	orrs	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001566:	2b01      	cmp	r3, #1
 8001568:	d106      	bne.n	8001578 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	3b01      	subs	r3, #1
 8001570:	045b      	lsls	r3, r3, #17
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800157c:	2b00      	cmp	r3, #0
 800157e:	d009      	beq.n	8001594 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	4b48      	ldr	r3, [pc, #288]	@ (80016bc <HAL_ADC_Init+0x304>)
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	69b9      	ldr	r1, [r7, #24]
 80015a4:	430b      	orrs	r3, r1
 80015a6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fee4 	bl	8001390 <LL_ADC_INJ_IsConversionOngoing>
 80015c8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d17f      	bne.n	80016d0 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d17c      	bne.n	80016d0 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015da:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80015e2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80015f2:	f023 0302 	bic.w	r3, r3, #2
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	69b9      	ldr	r1, [r7, #24]
 80015fc:	430b      	orrs	r3, r1
 80015fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d017      	beq.n	8001638 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	691a      	ldr	r2, [r3, #16]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001616:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001620:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001624:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6911      	ldr	r1, [r2, #16]
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8001636:	e013      	b.n	8001660 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	691a      	ldr	r2, [r3, #16]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001646:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800165c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001666:	2b01      	cmp	r3, #1
 8001668:	d12a      	bne.n	80016c0 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001674:	f023 0304 	bic.w	r3, r3, #4
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001686:	4311      	orrs	r1, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800168c:	430a      	orrs	r2, r1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 0201 	orr.w	r2, r2, #1
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	e019      	b.n	80016d0 <HAL_ADC_Init+0x318>
 800169c:	20000000 	.word	0x20000000
 80016a0:	053e2d63 	.word	0x053e2d63
 80016a4:	50000100 	.word	0x50000100
 80016a8:	50000400 	.word	0x50000400
 80016ac:	50000500 	.word	0x50000500
 80016b0:	50000600 	.word	0x50000600
 80016b4:	50000300 	.word	0x50000300
 80016b8:	50000700 	.word	0x50000700
 80016bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691a      	ldr	r2, [r3, #16]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d10c      	bne.n	80016f2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	f023 010f 	bic.w	r1, r3, #15
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	1e5a      	subs	r2, r3, #1
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80016f0:	e007      	b.n	8001702 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 020f 	bic.w	r2, r2, #15
 8001700:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001706:	f023 0303 	bic.w	r3, r3, #3
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001712:	e007      	b.n	8001724 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001718:	f043 0210 	orr.w	r2, r3, #16
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001724:	7ffb      	ldrb	r3, [r7, #31]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	@ 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	bf00      	nop

08001730 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b0b6      	sub	sp, #216	@ 0xd8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001740:	2300      	movs	r3, #0
 8001742:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800174a:	2b01      	cmp	r3, #1
 800174c:	d102      	bne.n	8001754 <HAL_ADC_ConfigChannel+0x24>
 800174e:	2302      	movs	r3, #2
 8001750:	f000 bc13 	b.w	8001f7a <HAL_ADC_ConfigChannel+0x84a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fe02 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	f040 83f3 	bne.w	8001f54 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	6859      	ldr	r1, [r3, #4]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	461a      	mov	r2, r3
 800177c:	f7ff fd18 	bl	80011b0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fdf0 	bl	800136a <LL_ADC_REG_IsConversionOngoing>
 800178a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fdfc 	bl	8001390 <LL_ADC_INJ_IsConversionOngoing>
 8001798:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800179c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	f040 81d9 	bne.w	8001b58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 81d4 	bne.w	8001b58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80017b8:	d10f      	bne.n	80017da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6818      	ldr	r0, [r3, #0]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fd1f 	bl	8001208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fcd9 	bl	800118a <LL_ADC_SetSamplingTimeCommonConfig>
 80017d8:	e00e      	b.n	80017f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6818      	ldr	r0, [r3, #0]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6819      	ldr	r1, [r3, #0]
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	461a      	mov	r2, r3
 80017e8:	f7ff fd0e 	bl	8001208 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fcc9 	bl	800118a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	695a      	ldr	r2, [r3, #20]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	08db      	lsrs	r3, r3, #3
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	2b04      	cmp	r3, #4
 8001818:	d022      	beq.n	8001860 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	6919      	ldr	r1, [r3, #16]
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800182a:	f7ff fc23 	bl	8001074 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6818      	ldr	r0, [r3, #0]
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	6919      	ldr	r1, [r3, #16]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	461a      	mov	r2, r3
 800183c:	f7ff fc6f 	bl	800111e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6818      	ldr	r0, [r3, #0]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x126>
 8001850:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001854:	e000      	b.n	8001858 <HAL_ADC_ConfigChannel+0x128>
 8001856:	2300      	movs	r3, #0
 8001858:	461a      	mov	r2, r3
 800185a:	f7ff fc7b 	bl	8001154 <LL_ADC_SetOffsetSaturation>
 800185e:	e17b      	b.n	8001b58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fc28 	bl	80010bc <LL_ADC_GetOffsetChannel>
 800186c:	4603      	mov	r3, r0
 800186e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10a      	bne.n	800188c <HAL_ADC_ConfigChannel+0x15c>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fc1d 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	0e9b      	lsrs	r3, r3, #26
 8001886:	f003 021f 	and.w	r2, r3, #31
 800188a:	e01e      	b.n	80018ca <HAL_ADC_ConfigChannel+0x19a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fc12 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80018a2:	fa93 f3a3 	rbit	r3, r3
 80018a6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80018aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80018ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80018b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80018ba:	2320      	movs	r3, #32
 80018bc:	e004      	b.n	80018c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80018be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d105      	bne.n	80018e2 <HAL_ADC_ConfigChannel+0x1b2>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	0e9b      	lsrs	r3, r3, #26
 80018dc:	f003 031f 	and.w	r3, r3, #31
 80018e0:	e018      	b.n	8001914 <HAL_ADC_ConfigChannel+0x1e4>
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80018f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80018fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001906:	2320      	movs	r3, #32
 8001908:	e004      	b.n	8001914 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800190a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800190e:	fab3 f383 	clz	r3, r3
 8001912:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001914:	429a      	cmp	r2, r3
 8001916:	d106      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fbe1 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbc5 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <HAL_ADC_ConfigChannel+0x222>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fbba 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001948:	4603      	mov	r3, r0
 800194a:	0e9b      	lsrs	r3, r3, #26
 800194c:	f003 021f 	and.w	r2, r3, #31
 8001950:	e01e      	b.n	8001990 <HAL_ADC_ConfigChannel+0x260>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fbaf 	bl	80010bc <LL_ADC_GetOffsetChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001968:	fa93 f3a3 	rbit	r3, r3
 800196c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001970:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001974:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001980:	2320      	movs	r3, #32
 8001982:	e004      	b.n	800198e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001998:	2b00      	cmp	r3, #0
 800199a:	d105      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x278>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	0e9b      	lsrs	r3, r3, #26
 80019a2:	f003 031f 	and.w	r3, r3, #31
 80019a6:	e018      	b.n	80019da <HAL_ADC_ConfigChannel+0x2aa>
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80019bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80019c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80019c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e004      	b.n	80019da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80019d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019da:	429a      	cmp	r2, r3
 80019dc:	d106      	bne.n	80019ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2200      	movs	r2, #0
 80019e4:	2101      	movs	r1, #1
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fb7e 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2102      	movs	r1, #2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fb62 	bl	80010bc <LL_ADC_GetOffsetChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10a      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x2e8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2102      	movs	r1, #2
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fb57 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	0e9b      	lsrs	r3, r3, #26
 8001a12:	f003 021f 	and.w	r2, r3, #31
 8001a16:	e01e      	b.n	8001a56 <HAL_ADC_ConfigChannel+0x326>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fb4c 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a2e:	fa93 f3a3 	rbit	r3, r3
 8001a32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001a36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001a3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e004      	b.n	8001a54 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001a4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001a4e:	fab3 f383 	clz	r3, r3
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d105      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x33e>
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0e9b      	lsrs	r3, r3, #26
 8001a68:	f003 031f 	and.w	r3, r3, #31
 8001a6c:	e016      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x36c>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001a80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001a82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001a8e:	2320      	movs	r3, #32
 8001a90:	e004      	b.n	8001a9c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001a92:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d106      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fb1d 	bl	80010e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fb01 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10a      	bne.n	8001ada <HAL_ADC_ConfigChannel+0x3aa>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2103      	movs	r1, #3
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff faf6 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	0e9b      	lsrs	r3, r3, #26
 8001ad4:	f003 021f 	and.w	r2, r3, #31
 8001ad8:	e017      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x3da>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2103      	movs	r1, #3
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff faeb 	bl	80010bc <LL_ADC_GetOffsetChannel>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001af4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001af6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e003      	b.n	8001b08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001b00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b02:	fab3 f383 	clz	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <HAL_ADC_ConfigChannel+0x3f2>
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	0e9b      	lsrs	r3, r3, #26
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	e011      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b2a:	fa93 f3a3 	rbit	r3, r3
 8001b2e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001b30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001b34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001b3a:	2320      	movs	r3, #32
 8001b3c:	e003      	b.n	8001b46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d106      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2103      	movs	r1, #3
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fac8 	bl	80010e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fbf1 	bl	8001344 <LL_ADC_IsEnabled>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f040 813d 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6818      	ldr	r0, [r3, #0]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	6819      	ldr	r1, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	461a      	mov	r2, r3
 8001b78:	f7ff fb72 	bl	8001260 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	4aa2      	ldr	r2, [pc, #648]	@ (8001e0c <HAL_ADC_ConfigChannel+0x6dc>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f040 812e 	bne.w	8001de4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x480>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	0e9b      	lsrs	r3, r3, #26
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e019      	b.n	8001be4 <HAL_ADC_ConfigChannel+0x4b4>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bc0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001bc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8001bc8:	2320      	movs	r3, #32
 8001bca:	e003      	b.n	8001bd4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8001bcc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001bce:	fab3 f383 	clz	r3, r3
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	bf94      	ite	ls
 8001bde:	2301      	movls	r3, #1
 8001be0:	2300      	movhi	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d079      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d107      	bne.n	8001c04 <HAL_ADC_ConfigChannel+0x4d4>
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	0e9b      	lsrs	r3, r3, #26
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	069b      	lsls	r3, r3, #26
 8001bfe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c02:	e015      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x500>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c0c:	fa93 f3a3 	rbit	r3, r3
 8001c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001c12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001c14:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8001c1c:	2320      	movs	r3, #32
 8001c1e:	e003      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8001c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	3301      	adds	r3, #1
 8001c2a:	069b      	lsls	r3, r3, #26
 8001c2c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <HAL_ADC_ConfigChannel+0x520>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0e9b      	lsrs	r3, r3, #26
 8001c42:	3301      	adds	r3, #1
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4e:	e017      	b.n	8001c80 <HAL_ADC_ConfigChannel+0x550>
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c58:	fa93 f3a3 	rbit	r3, r3
 8001c5c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8001c5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c60:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e003      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8001c6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	f003 031f 	and.w	r3, r3, #31
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c80:	ea42 0103 	orr.w	r1, r2, r3
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d10a      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x576>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	0e9b      	lsrs	r3, r3, #26
 8001c96:	3301      	adds	r3, #1
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	051b      	lsls	r3, r3, #20
 8001ca4:	e018      	b.n	8001cd8 <HAL_ADC_ConfigChannel+0x5a8>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cae:	fa93 f3a3 	rbit	r3, r3
 8001cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8001cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8001cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8001cbe:	2320      	movs	r3, #32
 8001cc0:	e003      	b.n	8001cca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8001cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cc4:	fab3 f383 	clz	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	f003 021f 	and.w	r2, r3, #31
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4413      	add	r3, r2
 8001cd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cd8:	430b      	orrs	r3, r1
 8001cda:	e07e      	b.n	8001dda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d107      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x5c8>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0e9b      	lsrs	r3, r3, #26
 8001cee:	3301      	adds	r3, #1
 8001cf0:	069b      	lsls	r3, r3, #26
 8001cf2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cf6:	e015      	b.n	8001d24 <HAL_ADC_ConfigChannel+0x5f4>
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d00:	fa93 f3a3 	rbit	r3, r3
 8001d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8001d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d08:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8001d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8001d10:	2320      	movs	r3, #32
 8001d12:	e003      	b.n	8001d1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8001d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d16:	fab3 f383 	clz	r3, r3
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	069b      	lsls	r3, r3, #26
 8001d20:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x614>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e9b      	lsrs	r3, r3, #26
 8001d36:	3301      	adds	r3, #1
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	e017      	b.n	8001d74 <HAL_ADC_ConfigChannel+0x644>
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	fa93 f3a3 	rbit	r3, r3
 8001d50:	61fb      	str	r3, [r7, #28]
  return result;
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8001d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8001d5c:	2320      	movs	r3, #32
 8001d5e:	e003      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f003 031f 	and.w	r3, r3, #31
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f303 	lsl.w	r3, r1, r3
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x670>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0e9b      	lsrs	r3, r3, #26
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	3b1e      	subs	r3, #30
 8001d98:	051b      	lsls	r3, r3, #20
 8001d9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d9e:	e01b      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x6a8>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	fa93 f3a3 	rbit	r3, r3
 8001dac:	613b      	str	r3, [r7, #16]
  return result;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e003      	b.n	8001dc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	fab3 f383 	clz	r3, r3
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	f003 021f 	and.w	r2, r3, #31
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	3b1e      	subs	r3, #30
 8001dd2:	051b      	lsls	r3, r3, #20
 8001dd4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dd8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7ff fa12 	bl	8001208 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b09      	ldr	r3, [pc, #36]	@ (8001e10 <HAL_ADC_ConfigChannel+0x6e0>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80be 	beq.w	8001f6e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_ConfigChannel+0x6d6>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <HAL_ADC_ConfigChannel+0x6e4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d10a      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x6ec>
 8001e06:	4b04      	ldr	r3, [pc, #16]	@ (8001e18 <HAL_ADC_ConfigChannel+0x6e8>)
 8001e08:	e009      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x6ee>
 8001e0a:	bf00      	nop
 8001e0c:	407f0000 	.word	0x407f0000
 8001e10:	80080000 	.word	0x80080000
 8001e14:	50000100 	.word	0x50000100
 8001e18:	50000300 	.word	0x50000300
 8001e1c:	4b59      	ldr	r3, [pc, #356]	@ (8001f84 <HAL_ADC_ConfigChannel+0x854>)
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff f91a 	bl	8001058 <LL_ADC_GetCommonPathInternalCh>
 8001e24:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a56      	ldr	r2, [pc, #344]	@ (8001f88 <HAL_ADC_ConfigChannel+0x858>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d004      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x70c>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a55      	ldr	r2, [pc, #340]	@ (8001f8c <HAL_ADC_ConfigChannel+0x85c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d13a      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e40:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d134      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e50:	d005      	beq.n	8001e5e <HAL_ADC_ConfigChannel+0x72e>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a4e      	ldr	r2, [pc, #312]	@ (8001f90 <HAL_ADC_ConfigChannel+0x860>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	f040 8085 	bne.w	8001f68 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e66:	d004      	beq.n	8001e72 <HAL_ADC_ConfigChannel+0x742>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a49      	ldr	r2, [pc, #292]	@ (8001f94 <HAL_ADC_ConfigChannel+0x864>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_ConfigChannel+0x746>
 8001e72:	4a49      	ldr	r2, [pc, #292]	@ (8001f98 <HAL_ADC_ConfigChannel+0x868>)
 8001e74:	e000      	b.n	8001e78 <HAL_ADC_ConfigChannel+0x748>
 8001e76:	4a43      	ldr	r2, [pc, #268]	@ (8001f84 <HAL_ADC_ConfigChannel+0x854>)
 8001e78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001e7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e80:	4619      	mov	r1, r3
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7ff f8d5 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e88:	4b44      	ldr	r3, [pc, #272]	@ (8001f9c <HAL_ADC_ConfigChannel+0x86c>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	099b      	lsrs	r3, r3, #6
 8001e8e:	4a44      	ldr	r2, [pc, #272]	@ (8001fa0 <HAL_ADC_ConfigChannel+0x870>)
 8001e90:	fba2 2303 	umull	r2, r3, r2, r3
 8001e94:	099b      	lsrs	r3, r3, #6
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ea2:	e002      	b.n	8001eaa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f9      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001eb0:	e05a      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a3b      	ldr	r2, [pc, #236]	@ (8001fa4 <HAL_ADC_ConfigChannel+0x874>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d125      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001ec0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d11f      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a31      	ldr	r2, [pc, #196]	@ (8001f94 <HAL_ADC_ConfigChannel+0x864>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d104      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x7ac>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a34      	ldr	r2, [pc, #208]	@ (8001fa8 <HAL_ADC_ConfigChannel+0x878>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d047      	beq.n	8001f6c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ee4:	d004      	beq.n	8001ef0 <HAL_ADC_ConfigChannel+0x7c0>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2a      	ldr	r2, [pc, #168]	@ (8001f94 <HAL_ADC_ConfigChannel+0x864>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x7c4>
 8001ef0:	4a29      	ldr	r2, [pc, #164]	@ (8001f98 <HAL_ADC_ConfigChannel+0x868>)
 8001ef2:	e000      	b.n	8001ef6 <HAL_ADC_ConfigChannel+0x7c6>
 8001ef4:	4a23      	ldr	r2, [pc, #140]	@ (8001f84 <HAL_ADC_ConfigChannel+0x854>)
 8001ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001efa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001efe:	4619      	mov	r1, r3
 8001f00:	4610      	mov	r0, r2
 8001f02:	f7ff f896 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f06:	e031      	b.n	8001f6c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a27      	ldr	r2, [pc, #156]	@ (8001fac <HAL_ADC_ConfigChannel+0x87c>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d12d      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d127      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a1c      	ldr	r2, [pc, #112]	@ (8001f94 <HAL_ADC_ConfigChannel+0x864>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d022      	beq.n	8001f6e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f30:	d004      	beq.n	8001f3c <HAL_ADC_ConfigChannel+0x80c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a17      	ldr	r2, [pc, #92]	@ (8001f94 <HAL_ADC_ConfigChannel+0x864>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x810>
 8001f3c:	4a16      	ldr	r2, [pc, #88]	@ (8001f98 <HAL_ADC_ConfigChannel+0x868>)
 8001f3e:	e000      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x812>
 8001f40:	4a10      	ldr	r2, [pc, #64]	@ (8001f84 <HAL_ADC_ConfigChannel+0x854>)
 8001f42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001f46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	f7ff f870 	bl	8001032 <LL_ADC_SetCommonPathInternalCh>
 8001f52:	e00c      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	f043 0220 	orr.w	r2, r3, #32
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8001f66:	e002      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f68:	bf00      	nop
 8001f6a:	e000      	b.n	8001f6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8001f76:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	37d8      	adds	r7, #216	@ 0xd8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	50000700 	.word	0x50000700
 8001f88:	c3210000 	.word	0xc3210000
 8001f8c:	90c00010 	.word	0x90c00010
 8001f90:	50000600 	.word	0x50000600
 8001f94:	50000100 	.word	0x50000100
 8001f98:	50000300 	.word	0x50000300
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	053e2d63 	.word	0x053e2d63
 8001fa4:	c7520000 	.word	0xc7520000
 8001fa8:	50000500 	.word	0x50000500
 8001fac:	cb840000 	.word	0xcb840000

08001fb0 <LL_ADC_IsEnabled>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d101      	bne.n	8001fc8 <LL_ADC_IsEnabled+0x18>
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <LL_ADC_IsEnabled+0x1a>
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b083      	sub	sp, #12
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	d101      	bne.n	8001fee <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fee:	2300      	movs	r3, #0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b0a1      	sub	sp, #132	@ 0x84
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002016:	2302      	movs	r3, #2
 8002018:	e0e7      	b.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002022:	2300      	movs	r3, #0
 8002024:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002026:	2300      	movs	r3, #0
 8002028:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002032:	d102      	bne.n	800203a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002034:	4b6f      	ldr	r3, [pc, #444]	@ (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	e009      	b.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a6e      	ldr	r2, [pc, #440]	@ (80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d102      	bne.n	800204a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002044:	4b6d      	ldr	r3, [pc, #436]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	e001      	b.n	800204e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10b      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002058:	f043 0220 	orr.w	r2, r3, #32
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0be      	b.n	80021ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff ffb1 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002074:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff ffab 	bl	8001fd6 <LL_ADC_REG_IsConversionOngoing>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	f040 80a0 	bne.w	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002088:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800208a:	2b00      	cmp	r3, #0
 800208c:	f040 809c 	bne.w	80021c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002098:	d004      	beq.n	80020a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a55      	ldr	r2, [pc, #340]	@ (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80020a4:	4b56      	ldr	r3, [pc, #344]	@ (8002200 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80020a6:	e000      	b.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80020a8:	4b56      	ldr	r3, [pc, #344]	@ (8002204 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80020aa:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d04b      	beq.n	800214c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80020b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6859      	ldr	r1, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020c6:	035b      	lsls	r3, r3, #13
 80020c8:	430b      	orrs	r3, r1
 80020ca:	431a      	orrs	r2, r3
 80020cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80020ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020d8:	d004      	beq.n	80020e4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a45      	ldr	r2, [pc, #276]	@ (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d10f      	bne.n	8002104 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80020e4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80020e8:	f7ff ff62 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020ec:	4604      	mov	r4, r0
 80020ee:	4841      	ldr	r0, [pc, #260]	@ (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80020f0:	f7ff ff5e 	bl	8001fb0 <LL_ADC_IsEnabled>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4323      	orrs	r3, r4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	e012      	b.n	800212a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002104:	483c      	ldr	r0, [pc, #240]	@ (80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002106:	f7ff ff53 	bl	8001fb0 <LL_ADC_IsEnabled>
 800210a:	4604      	mov	r4, r0
 800210c:	483b      	ldr	r0, [pc, #236]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800210e:	f7ff ff4f 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002112:	4603      	mov	r3, r0
 8002114:	431c      	orrs	r4, r3
 8002116:	483c      	ldr	r0, [pc, #240]	@ (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002118:	f7ff ff4a 	bl	8001fb0 <LL_ADC_IsEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	4323      	orrs	r3, r4
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf0c      	ite	eq
 8002124:	2301      	moveq	r3, #1
 8002126:	2300      	movne	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d056      	beq.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800212e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002136:	f023 030f 	bic.w	r3, r3, #15
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	6811      	ldr	r1, [r2, #0]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	6892      	ldr	r2, [r2, #8]
 8002142:	430a      	orrs	r2, r1
 8002144:	431a      	orrs	r2, r3
 8002146:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002148:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800214a:	e047      	b.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800214c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002154:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002156:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002160:	d004      	beq.n	800216c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a23      	ldr	r2, [pc, #140]	@ (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d10f      	bne.n	800218c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800216c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002170:	f7ff ff1e 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002174:	4604      	mov	r4, r0
 8002176:	481f      	ldr	r0, [pc, #124]	@ (80021f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002178:	f7ff ff1a 	bl	8001fb0 <LL_ADC_IsEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	4323      	orrs	r3, r4
 8002180:	2b00      	cmp	r3, #0
 8002182:	bf0c      	ite	eq
 8002184:	2301      	moveq	r3, #1
 8002186:	2300      	movne	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e012      	b.n	80021b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800218c:	481a      	ldr	r0, [pc, #104]	@ (80021f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800218e:	f7ff ff0f 	bl	8001fb0 <LL_ADC_IsEnabled>
 8002192:	4604      	mov	r4, r0
 8002194:	4819      	ldr	r0, [pc, #100]	@ (80021fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002196:	f7ff ff0b 	bl	8001fb0 <LL_ADC_IsEnabled>
 800219a:	4603      	mov	r3, r0
 800219c:	431c      	orrs	r4, r3
 800219e:	481a      	ldr	r0, [pc, #104]	@ (8002208 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80021a0:	f7ff ff06 	bl	8001fb0 <LL_ADC_IsEnabled>
 80021a4:	4603      	mov	r3, r0
 80021a6:	4323      	orrs	r3, r4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf0c      	ite	eq
 80021ac:	2301      	moveq	r3, #1
 80021ae:	2300      	movne	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d012      	beq.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80021b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80021be:	f023 030f 	bic.w	r3, r3, #15
 80021c2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021c4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021c6:	e009      	b.n	80021dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	f043 0220 	orr.w	r2, r3, #32
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80021da:	e000      	b.n	80021de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80021e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3784      	adds	r7, #132	@ 0x84
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}
 80021f2:	bf00      	nop
 80021f4:	50000100 	.word	0x50000100
 80021f8:	50000400 	.word	0x50000400
 80021fc:	50000500 	.word	0x50000500
 8002200:	50000300 	.word	0x50000300
 8002204:	50000700 	.word	0x50000700
 8002208:	50000600 	.word	0x50000600

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	@ (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	@ (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	@ (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	@ (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	@ (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	@ (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	@ 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	@ 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	@ (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295
 800238c:	f7ff ff8e 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	@ (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff29 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff40 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff90 	bl	8002300 <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5f 	bl	80022ac <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff33 	bl	8002270 <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa4 	bl	8002368 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e08d      	b.n	800255a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	4b47      	ldr	r3, [pc, #284]	@ (8002564 <HAL_DMA_Init+0x138>)
 8002446:	429a      	cmp	r2, r3
 8002448:	d80f      	bhi.n	800246a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	4b45      	ldr	r3, [pc, #276]	@ (8002568 <HAL_DMA_Init+0x13c>)
 8002452:	4413      	add	r3, r2
 8002454:	4a45      	ldr	r2, [pc, #276]	@ (800256c <HAL_DMA_Init+0x140>)
 8002456:	fba2 2303 	umull	r2, r3, r2, r3
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a42      	ldr	r2, [pc, #264]	@ (8002570 <HAL_DMA_Init+0x144>)
 8002466:	641a      	str	r2, [r3, #64]	@ 0x40
 8002468:	e00e      	b.n	8002488 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	4b40      	ldr	r3, [pc, #256]	@ (8002574 <HAL_DMA_Init+0x148>)
 8002472:	4413      	add	r3, r2
 8002474:	4a3d      	ldr	r2, [pc, #244]	@ (800256c <HAL_DMA_Init+0x140>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	091b      	lsrs	r3, r3, #4
 800247c:	009a      	lsls	r2, r3, #2
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a3c      	ldr	r2, [pc, #240]	@ (8002578 <HAL_DMA_Init+0x14c>)
 8002486:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800249e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024a2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f8fe 	bl	80026dc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024e8:	d102      	bne.n	80024f0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002504:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_DMA_Init+0x104>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d80c      	bhi.n	8002530 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f91e 	bl	8002758 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	e008      	b.n	8002542 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40020407 	.word	0x40020407
 8002568:	bffdfff8 	.word	0xbffdfff8
 800256c:	cccccccd 	.word	0xcccccccd
 8002570:	40020000 	.word	0x40020000
 8002574:	bffdfbf8 	.word	0xbffdfbf8
 8002578:	40020400 	.word	0x40020400

0800257c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	2204      	movs	r2, #4
 800259e:	409a      	lsls	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d026      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x7a>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d021      	beq.n	80025f6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d107      	bne.n	80025d0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f022 0204 	bic.w	r2, r2, #4
 80025ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d4:	f003 021f 	and.w	r2, r3, #31
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025dc:	2104      	movs	r1, #4
 80025de:	fa01 f202 	lsl.w	r2, r1, r2
 80025e2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d071      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025f4:	e06c      	b.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2202      	movs	r2, #2
 8002600:	409a      	lsls	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d02e      	beq.n	8002668 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d029      	beq.n	8002668 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0320 	and.w	r3, r3, #32
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10b      	bne.n	800263a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 020a 	bic.w	r2, r2, #10
 8002630:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263e:	f003 021f 	and.w	r2, r3, #31
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	2102      	movs	r1, #2
 8002648:	fa01 f202 	lsl.w	r2, r1, r2
 800264c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	2b00      	cmp	r3, #0
 800265c:	d038      	beq.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002666:	e033      	b.n	80026d0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2208      	movs	r2, #8
 8002672:	409a      	lsls	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4013      	ands	r3, r2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d02a      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d025      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 020e 	bic.w	r2, r2, #14
 8002694:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f003 021f 	and.w	r2, r3, #31
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d004      	beq.n	80026d2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
}
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d802      	bhi.n	80026f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80026f0:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	e001      	b.n	80026fa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80026f8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	b2db      	uxtb	r3, r3
 8002704:	3b08      	subs	r3, #8
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	009a      	lsls	r2, r3, #2
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	461a      	mov	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a0b      	ldr	r2, [pc, #44]	@ (8002754 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002726:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f003 031f 	and.w	r3, r3, #31
 800272e:	2201      	movs	r2, #1
 8002730:	409a      	lsls	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40020407 	.word	0x40020407
 8002748:	40020800 	.word	0x40020800
 800274c:	40020820 	.word	0x40020820
 8002750:	cccccccd 	.word	0xcccccccd
 8002754:	40020880 	.word	0x40020880

08002758 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	461a      	mov	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a08      	ldr	r2, [pc, #32]	@ (800279c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800277a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	3b01      	subs	r3, #1
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2201      	movs	r2, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800278c:	bf00      	nop
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	1000823f 	.word	0x1000823f
 800279c:	40020940 	.word	0x40020940

080027a0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	460b      	mov	r3, r1
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80027ae:	2300      	movs	r3, #0
 80027b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_EXTI_CB(CallbackID));

  switch (CallbackID)
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d103      	bne.n	80027c0 <HAL_EXTI_RegisterCallback+0x20>
  {
    /* set common callback */
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
      break;
 80027be:	e005      	b.n	80027cc <HAL_EXTI_RegisterCallback+0x2c>

    default:
      hexti->PendingCallback = NULL;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
      break;
 80027ca:	bf00      	nop
  }

  return status;
 80027cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
 80027e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e003      	b.n	80027f6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80027f4:	2300      	movs	r3, #0
  }
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	617b      	str	r3, [r7, #20]
  /* compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2201      	movs	r2, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <HAL_EXTI_IRQHandler+0x5c>)
 800282e:	4413      	add	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	693a      	ldr	r2, [r7, #16]
 8002838:	4013      	ands	r3, r2
 800283a:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	601a      	str	r2, [r3, #0]

    /* Call pending callback */
    if (hexti->PendingCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	4798      	blx	r3
    }
  }
}
 8002856:	bf00      	nop
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40010414 	.word	0x40010414

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002872:	e15a      	b.n	8002b2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 814c 	beq.w	8002b24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d005      	beq.n	80028a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d130      	bne.n	8002906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028da:	2201      	movs	r2, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0201 	and.w	r2, r3, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b03      	cmp	r3, #3
 8002910:	d017      	beq.n	8002942 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	2203      	movs	r2, #3
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43db      	mvns	r3, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4013      	ands	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	fa02 f303 	lsl.w	r3, r2, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4313      	orrs	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d123      	bne.n	8002996 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08da      	lsrs	r2, r3, #3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	3208      	adds	r2, #8
 8002956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800295a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	220f      	movs	r2, #15
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	6939      	ldr	r1, [r7, #16]
 8002992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	fa02 f303 	lsl.w	r3, r2, r3
 80029a6:	43db      	mvns	r3, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f003 0203 	and.w	r2, r3, #3
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80a6 	beq.w	8002b24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002b48 <HAL_GPIO_Init+0x2e4>)
 80029da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002b48 <HAL_GPIO_Init+0x2e4>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6613      	str	r3, [r2, #96]	@ 0x60
 80029e4:	4b58      	ldr	r3, [pc, #352]	@ (8002b48 <HAL_GPIO_Init+0x2e4>)
 80029e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f0:	4a56      	ldr	r2, [pc, #344]	@ (8002b4c <HAL_GPIO_Init+0x2e8>)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	3302      	adds	r3, #2
 80029f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a1a:	d01f      	beq.n	8002a5c <HAL_GPIO_Init+0x1f8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a4c      	ldr	r2, [pc, #304]	@ (8002b50 <HAL_GPIO_Init+0x2ec>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d019      	beq.n	8002a58 <HAL_GPIO_Init+0x1f4>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a4b      	ldr	r2, [pc, #300]	@ (8002b54 <HAL_GPIO_Init+0x2f0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d013      	beq.n	8002a54 <HAL_GPIO_Init+0x1f0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a4a      	ldr	r2, [pc, #296]	@ (8002b58 <HAL_GPIO_Init+0x2f4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00d      	beq.n	8002a50 <HAL_GPIO_Init+0x1ec>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a49      	ldr	r2, [pc, #292]	@ (8002b5c <HAL_GPIO_Init+0x2f8>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d007      	beq.n	8002a4c <HAL_GPIO_Init+0x1e8>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a48      	ldr	r2, [pc, #288]	@ (8002b60 <HAL_GPIO_Init+0x2fc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_GPIO_Init+0x1e4>
 8002a44:	2305      	movs	r3, #5
 8002a46:	e00a      	b.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a48:	2306      	movs	r3, #6
 8002a4a:	e008      	b.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a4c:	2304      	movs	r3, #4
 8002a4e:	e006      	b.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a50:	2303      	movs	r3, #3
 8002a52:	e004      	b.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a54:	2302      	movs	r3, #2
 8002a56:	e002      	b.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e000      	b.n	8002a5e <HAL_GPIO_Init+0x1fa>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	f002 0203 	and.w	r2, r2, #3
 8002a64:	0092      	lsls	r2, r2, #2
 8002a66:	4093      	lsls	r3, r2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6e:	4937      	ldr	r1, [pc, #220]	@ (8002b4c <HAL_GPIO_Init+0x2e8>)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	089b      	lsrs	r3, r3, #2
 8002a74:	3302      	adds	r3, #2
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a7c:	4b39      	ldr	r3, [pc, #228]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aa0:	4a30      	ldr	r2, [pc, #192]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002aa6:	4b2f      	ldr	r3, [pc, #188]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aca:	4a26      	ldr	r2, [pc, #152]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002ad0:	4b24      	ldr	r3, [pc, #144]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002af4:	4a1b      	ldr	r2, [pc, #108]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002afa:	4b1a      	ldr	r3, [pc, #104]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	43db      	mvns	r3, r3
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	4013      	ands	r3, r2
 8002b08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b1e:	4a11      	ldr	r2, [pc, #68]	@ (8002b64 <HAL_GPIO_Init+0x300>)
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3301      	adds	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f47f ae9d 	bne.w	8002874 <HAL_GPIO_Init+0x10>
  }
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40010000 	.word	0x40010000
 8002b50:	48000400 	.word	0x48000400
 8002b54:	48000800 	.word	0x48000800
 8002b58:	48000c00 	.word	0x48000c00
 8002b5c:	48001000 	.word	0x48001000
 8002b60:	48001400 	.word	0x48001400
 8002b64:	40010400 	.word	0x40010400

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b84:	e002      	b.n	8002b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b86:	887a      	ldrh	r2, [r7, #2]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d141      	bne.n	8002c2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ba6:	4b4b      	ldr	r3, [pc, #300]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb2:	d131      	bne.n	8002c18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bb4:	4b47      	ldr	r3, [pc, #284]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bba:	4a46      	ldr	r2, [pc, #280]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bc4:	4b43      	ldr	r3, [pc, #268]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bcc:	4a41      	ldr	r2, [pc, #260]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bd4:	4b40      	ldr	r3, [pc, #256]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2232      	movs	r2, #50	@ 0x32
 8002bda:	fb02 f303 	mul.w	r3, r2, r3
 8002bde:	4a3f      	ldr	r2, [pc, #252]	@ (8002cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002be0:	fba2 2303 	umull	r2, r3, r2, r3
 8002be4:	0c9b      	lsrs	r3, r3, #18
 8002be6:	3301      	adds	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bea:	e002      	b.n	8002bf2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bf2:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfe:	d102      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f2      	bne.n	8002bec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c06:	4b33      	ldr	r3, [pc, #204]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c12:	d158      	bne.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e057      	b.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c18:	4b2e      	ldr	r3, [pc, #184]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c1e:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c28:	e04d      	b.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c30:	d141      	bne.n	8002cb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c32:	4b28      	ldr	r3, [pc, #160]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d131      	bne.n	8002ca4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c40:	4b24      	ldr	r3, [pc, #144]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c46:	4a23      	ldr	r2, [pc, #140]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c50:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c58:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c60:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2232      	movs	r2, #50	@ 0x32
 8002c66:	fb02 f303 	mul.w	r3, r2, r3
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c70:	0c9b      	lsrs	r3, r3, #18
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c76:	e002      	b.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c7e:	4b15      	ldr	r3, [pc, #84]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c8a:	d102      	bne.n	8002c92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f2      	bne.n	8002c78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c9e:	d112      	bne.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e011      	b.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002caa:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cb4:	e007      	b.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cb6:	4b07      	ldr	r3, [pc, #28]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cbe:	4a05      	ldr	r2, [pc, #20]	@ (8002cd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr
 8002cd4:	40007000 	.word	0x40007000
 8002cd8:	20000000 	.word	0x20000000
 8002cdc:	431bde83 	.word	0x431bde83

08002ce0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ce4:	4b05      	ldr	r3, [pc, #20]	@ (8002cfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002cea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cee:	6093      	str	r3, [r2, #8]
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	40007000 	.word	0x40007000

08002d00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e2fe      	b.n	8003310 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d075      	beq.n	8002e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1e:	4b97      	ldr	r3, [pc, #604]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d28:	4b94      	ldr	r3, [pc, #592]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0303 	and.w	r3, r3, #3
 8002d30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	d102      	bne.n	8002d3e <HAL_RCC_OscConfig+0x3e>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d002      	beq.n	8002d44 <HAL_RCC_OscConfig+0x44>
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d10b      	bne.n	8002d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d44:	4b8d      	ldr	r3, [pc, #564]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d05b      	beq.n	8002e08 <HAL_RCC_OscConfig+0x108>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d157      	bne.n	8002e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e2d9      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d64:	d106      	bne.n	8002d74 <HAL_RCC_OscConfig+0x74>
 8002d66:	4b85      	ldr	r3, [pc, #532]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a84      	ldr	r2, [pc, #528]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	6013      	str	r3, [r2, #0]
 8002d72:	e01d      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x98>
 8002d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a7e      	ldr	r2, [pc, #504]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	4b7c      	ldr	r3, [pc, #496]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7b      	ldr	r2, [pc, #492]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0xb0>
 8002d98:	4b78      	ldr	r3, [pc, #480]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a77      	ldr	r2, [pc, #476]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	4b75      	ldr	r3, [pc, #468]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a74      	ldr	r2, [pc, #464]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d013      	beq.n	8002de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db8:	f7fe f91c 	bl	8000ff4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc0:	f7fe f918 	bl	8000ff4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b64      	cmp	r3, #100	@ 0x64
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e29e      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd2:	4b6a      	ldr	r3, [pc, #424]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d0f0      	beq.n	8002dc0 <HAL_RCC_OscConfig+0xc0>
 8002dde:	e014      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7fe f908 	bl	8000ff4 <HAL_GetTick>
 8002de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002de8:	f7fe f904 	bl	8000ff4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b64      	cmp	r3, #100	@ 0x64
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e28a      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002dfa:	4b60      	ldr	r3, [pc, #384]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0xe8>
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d075      	beq.n	8002f02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e16:	4b59      	ldr	r3, [pc, #356]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e20:	4b56      	ldr	r3, [pc, #344]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b0c      	cmp	r3, #12
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_OscConfig+0x136>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_OscConfig+0x13c>
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	2b04      	cmp	r3, #4
 8002e3a:	d11f      	bne.n	8002e7c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e3c:	4b4f      	ldr	r3, [pc, #316]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <HAL_RCC_OscConfig+0x154>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e25d      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e54:	4b49      	ldr	r3, [pc, #292]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	4946      	ldr	r1, [pc, #280]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002e68:	4b45      	ldr	r3, [pc, #276]	@ (8002f80 <HAL_RCC_OscConfig+0x280>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f7fe f875 	bl	8000f5c <HAL_InitTick>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d043      	beq.n	8002f00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e249      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d023      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e84:	4b3d      	ldr	r3, [pc, #244]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3c      	ldr	r2, [pc, #240]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe f8b0 	bl	8000ff4 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e98:	f7fe f8ac 	bl	8000ff4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e232      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d0f0      	beq.n	8002e98 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb6:	4b31      	ldr	r3, [pc, #196]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	492d      	ldr	r1, [pc, #180]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	604b      	str	r3, [r1, #4]
 8002eca:	e01a      	b.n	8002f02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed8:	f7fe f88c 	bl	8000ff4 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee0:	f7fe f888 	bl	8000ff4 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b02      	cmp	r3, #2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e20e      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ef2:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x1e0>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d041      	beq.n	8002f92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d01c      	beq.n	8002f50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002f18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f1c:	4a17      	ldr	r2, [pc, #92]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe f865 	bl	8000ff4 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f2e:	f7fe f861 	bl	8000ff4 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1e7      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002f40:	4b0e      	ldr	r3, [pc, #56]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ef      	beq.n	8002f2e <HAL_RCC_OscConfig+0x22e>
 8002f4e:	e020      	b.n	8002f92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f50:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f56:	4a09      	ldr	r2, [pc, #36]	@ (8002f7c <HAL_RCC_OscConfig+0x27c>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fe f848 	bl	8000ff4 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f66:	e00d      	b.n	8002f84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f68:	f7fe f844 	bl	8000ff4 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d906      	bls.n	8002f84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e1ca      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f84:	4b8c      	ldr	r3, [pc, #560]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8002f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1ea      	bne.n	8002f68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0304 	and.w	r3, r3, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 80a6 	beq.w	80030ec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002fa4:	4b84      	ldr	r3, [pc, #528]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x2b4>
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x2b6>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b7f      	ldr	r3, [pc, #508]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc6:	4b7c      	ldr	r3, [pc, #496]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd6:	4b79      	ldr	r3, [pc, #484]	@ (80031bc <HAL_RCC_OscConfig+0x4bc>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d118      	bne.n	8003014 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe2:	4b76      	ldr	r3, [pc, #472]	@ (80031bc <HAL_RCC_OscConfig+0x4bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a75      	ldr	r2, [pc, #468]	@ (80031bc <HAL_RCC_OscConfig+0x4bc>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fee:	f7fe f801 	bl	8000ff4 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ff6:	f7fd fffd 	bl	8000ff4 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e183      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003008:	4b6c      	ldr	r3, [pc, #432]	@ (80031bc <HAL_RCC_OscConfig+0x4bc>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0f0      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d108      	bne.n	800302e <HAL_RCC_OscConfig+0x32e>
 800301c:	4b66      	ldr	r3, [pc, #408]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003022:	4a65      	ldr	r2, [pc, #404]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800302c:	e024      	b.n	8003078 <HAL_RCC_OscConfig+0x378>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	2b05      	cmp	r3, #5
 8003034:	d110      	bne.n	8003058 <HAL_RCC_OscConfig+0x358>
 8003036:	4b60      	ldr	r3, [pc, #384]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800303c:	4a5e      	ldr	r2, [pc, #376]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800303e:	f043 0304 	orr.w	r3, r3, #4
 8003042:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003046:	4b5c      	ldr	r3, [pc, #368]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800304c:	4a5a      	ldr	r2, [pc, #360]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003056:	e00f      	b.n	8003078 <HAL_RCC_OscConfig+0x378>
 8003058:	4b57      	ldr	r3, [pc, #348]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	4a56      	ldr	r2, [pc, #344]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003068:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	4a52      	ldr	r2, [pc, #328]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003070:	f023 0304 	bic.w	r3, r3, #4
 8003074:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d016      	beq.n	80030ae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003080:	f7fd ffb8 	bl	8000ff4 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003088:	f7fd ffb4 	bl	8000ff4 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003096:	4293      	cmp	r3, r2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e138      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800309e:	4b46      	ldr	r3, [pc, #280]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 80030a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0ed      	beq.n	8003088 <HAL_RCC_OscConfig+0x388>
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ae:	f7fd ffa1 	bl	8000ff4 <HAL_GetTick>
 80030b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030b4:	e00a      	b.n	80030cc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b6:	f7fd ff9d 	bl	8000ff4 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e121      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80030cc:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ed      	bne.n	80030b6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030da:	7ffb      	ldrb	r3, [r7, #31]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d105      	bne.n	80030ec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e0:	4b35      	ldr	r3, [pc, #212]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	4a34      	ldr	r2, [pc, #208]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 80030e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0320 	and.w	r3, r3, #32
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d03c      	beq.n	8003172 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01c      	beq.n	800313a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003100:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003106:	4a2c      	ldr	r2, [pc, #176]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003108:	f043 0301 	orr.w	r3, r3, #1
 800310c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fd ff70 	bl	8000ff4 <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003118:	f7fd ff6c 	bl	8000ff4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0f2      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800312a:	4b23      	ldr	r3, [pc, #140]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800312c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0ef      	beq.n	8003118 <HAL_RCC_OscConfig+0x418>
 8003138:	e01b      	b.n	8003172 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800313a:	4b1f      	ldr	r3, [pc, #124]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800313c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003140:	4a1d      	ldr	r2, [pc, #116]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fd ff53 	bl	8000ff4 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003152:	f7fd ff4f 	bl	8000ff4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0d5      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003164:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003166:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1ef      	bne.n	8003152 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80c9 	beq.w	800330e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317c:	4b0e      	ldr	r3, [pc, #56]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b0c      	cmp	r3, #12
 8003186:	f000 8083 	beq.w	8003290 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d15e      	bne.n	8003250 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b09      	ldr	r3, [pc, #36]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <HAL_RCC_OscConfig+0x4b8>)
 8003198:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800319c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fd ff29 	bl	8000ff4 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031a4:	e00c      	b.n	80031c0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a6:	f7fd ff25 	bl	8000ff4 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d905      	bls.n	80031c0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e0ab      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
 80031b8:	40021000 	.word	0x40021000
 80031bc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031c0:	4b55      	ldr	r3, [pc, #340]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ec      	bne.n	80031a6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031cc:	4b52      	ldr	r3, [pc, #328]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 80031ce:	68da      	ldr	r2, [r3, #12]
 80031d0:	4b52      	ldr	r3, [pc, #328]	@ (800331c <HAL_RCC_OscConfig+0x61c>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6a11      	ldr	r1, [r2, #32]
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031dc:	3a01      	subs	r2, #1
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	4311      	orrs	r1, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80031e6:	0212      	lsls	r2, r2, #8
 80031e8:	4311      	orrs	r1, r2
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80031ee:	0852      	lsrs	r2, r2, #1
 80031f0:	3a01      	subs	r2, #1
 80031f2:	0552      	lsls	r2, r2, #21
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80031fa:	0852      	lsrs	r2, r2, #1
 80031fc:	3a01      	subs	r2, #1
 80031fe:	0652      	lsls	r2, r2, #25
 8003200:	4311      	orrs	r1, r2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003206:	06d2      	lsls	r2, r2, #27
 8003208:	430a      	orrs	r2, r1
 800320a:	4943      	ldr	r1, [pc, #268]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 800320c:	4313      	orrs	r3, r2
 800320e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003210:	4b41      	ldr	r3, [pc, #260]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a40      	ldr	r2, [pc, #256]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800321a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800321c:	4b3e      	ldr	r3, [pc, #248]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4a3d      	ldr	r2, [pc, #244]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003226:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fd fee4 	bl	8000ff4 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003230:	f7fd fee0 	bl	8000ff4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e066      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003242:	4b35      	ldr	r3, [pc, #212]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0x530>
 800324e:	e05e      	b.n	800330e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003250:	4b31      	ldr	r3, [pc, #196]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a30      	ldr	r2, [pc, #192]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003256:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800325a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd feca 	bl	8000ff4 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7fd fec6 	bl	8000ff4 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e04c      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003276:	4b28      	ldr	r3, [pc, #160]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003282:	4b25      	ldr	r3, [pc, #148]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003284:	68da      	ldr	r2, [r3, #12]
 8003286:	4924      	ldr	r1, [pc, #144]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 8003288:	4b25      	ldr	r3, [pc, #148]	@ (8003320 <HAL_RCC_OscConfig+0x620>)
 800328a:	4013      	ands	r3, r2
 800328c:	60cb      	str	r3, [r1, #12]
 800328e:	e03e      	b.n	800330e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e039      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800329c:	4b1e      	ldr	r3, [pc, #120]	@ (8003318 <HAL_RCC_OscConfig+0x618>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f003 0203 	and.w	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d12c      	bne.n	800330a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ba:	3b01      	subs	r3, #1
 80032bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032be:	429a      	cmp	r2, r3
 80032c0:	d123      	bne.n	800330a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d11b      	bne.n	800330a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d113      	bne.n	800330a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	085b      	lsrs	r3, r3, #1
 80032ee:	3b01      	subs	r3, #1
 80032f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d109      	bne.n	800330a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e000      	b.n	8003310 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	40021000 	.word	0x40021000
 800331c:	019f800c 	.word	0x019f800c
 8003320:	feeefffc 	.word	0xfeeefffc

08003324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e11e      	b.n	800357a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800333c:	4b91      	ldr	r3, [pc, #580]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d910      	bls.n	800336c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b8e      	ldr	r3, [pc, #568]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	498c      	ldr	r1, [pc, #560]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b8a      	ldr	r3, [pc, #552]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e106      	b.n	800357a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	d073      	beq.n	8003460 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b03      	cmp	r3, #3
 800337e:	d129      	bne.n	80033d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003380:	4b81      	ldr	r3, [pc, #516]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0f4      	b.n	800357a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003390:	f000 f99e 	bl	80036d0 <RCC_GetSysClockFreqFromPLLSource>
 8003394:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4a7c      	ldr	r2, [pc, #496]	@ (800358c <HAL_RCC_ClockConfig+0x268>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d93f      	bls.n	800341e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800339e:	4b7a      	ldr	r3, [pc, #488]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d033      	beq.n	800341e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d12f      	bne.n	800341e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80033be:	4b72      	ldr	r3, [pc, #456]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033c6:	4a70      	ldr	r2, [pc, #448]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80033c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80033ce:	2380      	movs	r3, #128	@ 0x80
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	e024      	b.n	800341e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d107      	bne.n	80033ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033dc:	4b6a      	ldr	r3, [pc, #424]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d109      	bne.n	80033fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0c6      	b.n	800357a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033ec:	4b66      	ldr	r3, [pc, #408]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e0be      	b.n	800357a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80033fc:	f000 f8ce 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8003400:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	4a61      	ldr	r2, [pc, #388]	@ (800358c <HAL_RCC_ClockConfig+0x268>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d909      	bls.n	800341e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800340a:	4b5f      	ldr	r3, [pc, #380]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003412:	4a5d      	ldr	r2, [pc, #372]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 8003414:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003418:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800341a:	2380      	movs	r3, #128	@ 0x80
 800341c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800341e:	4b5a      	ldr	r3, [pc, #360]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f023 0203 	bic.w	r2, r3, #3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4957      	ldr	r1, [pc, #348]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800342c:	4313      	orrs	r3, r2
 800342e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003430:	f7fd fde0 	bl	8000ff4 <HAL_GetTick>
 8003434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003436:	e00a      	b.n	800344e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003438:	f7fd fddc 	bl	8000ff4 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e095      	b.n	800357a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344e:	4b4e      	ldr	r3, [pc, #312]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 020c 	and.w	r2, r3, #12
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	429a      	cmp	r2, r3
 800345e:	d1eb      	bne.n	8003438 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d023      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003478:	4b43      	ldr	r3, [pc, #268]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a42      	ldr	r2, [pc, #264]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800347e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003482:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0308 	and.w	r3, r3, #8
 800348c:	2b00      	cmp	r3, #0
 800348e:	d007      	beq.n	80034a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003490:	4b3d      	ldr	r3, [pc, #244]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003498:	4a3b      	ldr	r2, [pc, #236]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800349a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800349e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a0:	4b39      	ldr	r3, [pc, #228]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	4936      	ldr	r1, [pc, #216]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80034ae:	4313      	orrs	r3, r2
 80034b0:	608b      	str	r3, [r1, #8]
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b80      	cmp	r3, #128	@ 0x80
 80034b8:	d105      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80034ba:	4b33      	ldr	r3, [pc, #204]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	4a32      	ldr	r2, [pc, #200]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 80034c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d21d      	bcs.n	8003510 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d4:	4b2b      	ldr	r3, [pc, #172]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f023 020f 	bic.w	r2, r3, #15
 80034dc:	4929      	ldr	r1, [pc, #164]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80034e4:	f7fd fd86 	bl	8000ff4 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ea:	e00a      	b.n	8003502 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034ec:	f7fd fd82 	bl	8000ff4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e03b      	b.n	800357a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b20      	ldr	r3, [pc, #128]	@ (8003584 <HAL_RCC_ClockConfig+0x260>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d1ed      	bne.n	80034ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0304 	and.w	r3, r3, #4
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800351c:	4b1a      	ldr	r3, [pc, #104]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4917      	ldr	r1, [pc, #92]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d009      	beq.n	800354e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800353a:	4b13      	ldr	r3, [pc, #76]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	490f      	ldr	r1, [pc, #60]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800354e:	f000 f825 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8003552:	4602      	mov	r2, r0
 8003554:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <HAL_RCC_ClockConfig+0x264>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	490c      	ldr	r1, [pc, #48]	@ (8003590 <HAL_RCC_ClockConfig+0x26c>)
 8003560:	5ccb      	ldrb	r3, [r1, r3]
 8003562:	f003 031f 	and.w	r3, r3, #31
 8003566:	fa22 f303 	lsr.w	r3, r2, r3
 800356a:	4a0a      	ldr	r2, [pc, #40]	@ (8003594 <HAL_RCC_ClockConfig+0x270>)
 800356c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800356e:	4b0a      	ldr	r3, [pc, #40]	@ (8003598 <HAL_RCC_ClockConfig+0x274>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7fd fcf2 	bl	8000f5c <HAL_InitTick>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40022000 	.word	0x40022000
 8003588:	40021000 	.word	0x40021000
 800358c:	04c4b400 	.word	0x04c4b400
 8003590:	080056ac 	.word	0x080056ac
 8003594:	20000000 	.word	0x20000000
 8003598:	20000018 	.word	0x20000018

0800359c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80035a2:	4b2c      	ldr	r3, [pc, #176]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 030c 	and.w	r3, r3, #12
 80035aa:	2b04      	cmp	r3, #4
 80035ac:	d102      	bne.n	80035b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80035ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003658 <HAL_RCC_GetSysClockFreq+0xbc>)
 80035b0:	613b      	str	r3, [r7, #16]
 80035b2:	e047      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80035b4:	4b27      	ldr	r3, [pc, #156]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d102      	bne.n	80035c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80035c0:	4b26      	ldr	r3, [pc, #152]	@ (800365c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	e03e      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80035c6:	4b23      	ldr	r3, [pc, #140]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b0c      	cmp	r3, #12
 80035d0:	d136      	bne.n	8003640 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80035d2:	4b20      	ldr	r3, [pc, #128]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	f003 0303 	and.w	r3, r3, #3
 80035da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80035dc:	4b1d      	ldr	r3, [pc, #116]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	091b      	lsrs	r3, r3, #4
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	3301      	adds	r3, #1
 80035e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2b03      	cmp	r3, #3
 80035ee:	d10c      	bne.n	800360a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80035f0:	4a1a      	ldr	r2, [pc, #104]	@ (800365c <HAL_RCC_GetSysClockFreq+0xc0>)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	4a16      	ldr	r2, [pc, #88]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035fa:	68d2      	ldr	r2, [r2, #12]
 80035fc:	0a12      	lsrs	r2, r2, #8
 80035fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003602:	fb02 f303 	mul.w	r3, r2, r3
 8003606:	617b      	str	r3, [r7, #20]
      break;
 8003608:	e00c      	b.n	8003624 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800360a:	4a13      	ldr	r2, [pc, #76]	@ (8003658 <HAL_RCC_GetSysClockFreq+0xbc>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003612:	4a10      	ldr	r2, [pc, #64]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003614:	68d2      	ldr	r2, [r2, #12]
 8003616:	0a12      	lsrs	r2, r2, #8
 8003618:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	617b      	str	r3, [r7, #20]
      break;
 8003622:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003624:	4b0b      	ldr	r3, [pc, #44]	@ (8003654 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	0e5b      	lsrs	r3, r3, #25
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	3301      	adds	r3, #1
 8003630:	005b      	lsls	r3, r3, #1
 8003632:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	e001      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003640:	2300      	movs	r3, #0
 8003642:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003644:	693b      	ldr	r3, [r7, #16]
}
 8003646:	4618      	mov	r0, r3
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40021000 	.word	0x40021000
 8003658:	00f42400 	.word	0x00f42400
 800365c:	016e3600 	.word	0x016e3600

08003660 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b03      	ldr	r3, [pc, #12]	@ (8003674 <HAL_RCC_GetHCLKFreq+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000000 	.word	0x20000000

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800367c:	f7ff fff0 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8003680:	4602      	mov	r2, r0
 8003682:	4b06      	ldr	r3, [pc, #24]	@ (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0a1b      	lsrs	r3, r3, #8
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4904      	ldr	r1, [pc, #16]	@ (80036a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800368e:	5ccb      	ldrb	r3, [r1, r3]
 8003690:	f003 031f 	and.w	r3, r3, #31
 8003694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003698:	4618      	mov	r0, r3
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000
 80036a0:	080056bc 	.word	0x080056bc

080036a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80036a8:	f7ff ffda 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 80036ac:	4602      	mov	r2, r0
 80036ae:	4b06      	ldr	r3, [pc, #24]	@ (80036c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	0adb      	lsrs	r3, r3, #11
 80036b4:	f003 0307 	and.w	r3, r3, #7
 80036b8:	4904      	ldr	r1, [pc, #16]	@ (80036cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80036ba:	5ccb      	ldrb	r3, [r1, r3]
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	40021000 	.word	0x40021000
 80036cc:	080056bc 	.word	0x080056bc

080036d0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	091b      	lsrs	r3, r3, #4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	3301      	adds	r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	2b03      	cmp	r3, #3
 80036f2:	d10c      	bne.n	800370e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f4:	4a17      	ldr	r2, [pc, #92]	@ (8003754 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fc:	4a14      	ldr	r2, [pc, #80]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036fe:	68d2      	ldr	r2, [r2, #12]
 8003700:	0a12      	lsrs	r2, r2, #8
 8003702:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	617b      	str	r3, [r7, #20]
    break;
 800370c:	e00c      	b.n	8003728 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800370e:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4a0e      	ldr	r2, [pc, #56]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	0a12      	lsrs	r2, r2, #8
 800371c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003720:	fb02 f303 	mul.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    break;
 8003726:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003728:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0e5b      	lsrs	r3, r3, #25
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	3301      	adds	r3, #1
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003738:	697a      	ldr	r2, [r7, #20]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003742:	687b      	ldr	r3, [r7, #4]
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	40021000 	.word	0x40021000
 8003754:	016e3600 	.word	0x016e3600
 8003758:	00f42400 	.word	0x00f42400

0800375c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003764:	2300      	movs	r3, #0
 8003766:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003768:	2300      	movs	r3, #0
 800376a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8098 	beq.w	80038aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800377a:	2300      	movs	r3, #0
 800377c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377e:	4b43      	ldr	r3, [pc, #268]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003782:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10d      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800378a:	4b40      	ldr	r3, [pc, #256]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800378c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378e:	4a3f      	ldr	r2, [pc, #252]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003794:	6593      	str	r3, [r2, #88]	@ 0x58
 8003796:	4b3d      	ldr	r3, [pc, #244]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	60bb      	str	r3, [r7, #8]
 80037a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a2:	2301      	movs	r3, #1
 80037a4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a39      	ldr	r2, [pc, #228]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037b0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037b2:	f7fd fc1f 	bl	8000ff4 <HAL_GetTick>
 80037b6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037b8:	e009      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ba:	f7fd fc1b 	bl	8000ff4 <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	d902      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	74fb      	strb	r3, [r7, #19]
        break;
 80037cc:	e005      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ce:	4b30      	ldr	r3, [pc, #192]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037da:	7cfb      	ldrb	r3, [r7, #19]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d159      	bne.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037e0:	4b2a      	ldr	r3, [pc, #168]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ea:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d01e      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d019      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037fc:	4b23      	ldr	r3, [pc, #140]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003806:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003808:	4b20      	ldr	r3, [pc, #128]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	4a1f      	ldr	r2, [pc, #124]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003818:	4b1c      	ldr	r3, [pc, #112]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800381e:	4a1b      	ldr	r2, [pc, #108]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003820:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003824:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003828:	4a18      	ldr	r2, [pc, #96]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	2b00      	cmp	r3, #0
 8003838:	d016      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383a:	f7fd fbdb 	bl	8000ff4 <HAL_GetTick>
 800383e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003840:	e00b      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003842:	f7fd fbd7 	bl	8000ff4 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003850:	4293      	cmp	r3, r2
 8003852:	d902      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	74fb      	strb	r3, [r7, #19]
            break;
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800385a:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d0ec      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003868:	7cfb      	ldrb	r3, [r7, #19]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800386e:	4b07      	ldr	r3, [pc, #28]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003874:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003884:	e008      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	74bb      	strb	r3, [r7, #18]
 800388a:	e005      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003898:	7c7b      	ldrb	r3, [r7, #17]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d105      	bne.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800389e:	4ba7      	ldr	r3, [pc, #668]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a2:	4aa6      	ldr	r2, [pc, #664]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038a8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038b6:	4ba1      	ldr	r3, [pc, #644]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038bc:	f023 0203 	bic.w	r2, r3, #3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	499d      	ldr	r1, [pc, #628]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038d8:	4b98      	ldr	r3, [pc, #608]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038de:	f023 020c 	bic.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	4995      	ldr	r1, [pc, #596]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038fa:	4b90      	ldr	r3, [pc, #576]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003900:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	498c      	ldr	r1, [pc, #560]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800391c:	4b87      	ldr	r3, [pc, #540]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003922:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	4984      	ldr	r1, [pc, #528]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800393e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003944:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	497b      	ldr	r1, [pc, #492]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003960:	4b76      	ldr	r3, [pc, #472]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003966:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	4973      	ldr	r1, [pc, #460]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003982:	4b6e      	ldr	r3, [pc, #440]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	496a      	ldr	r1, [pc, #424]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039a4:	4b65      	ldr	r3, [pc, #404]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4962      	ldr	r1, [pc, #392]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039c6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	4959      	ldr	r1, [pc, #356]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039e8:	4b54      	ldr	r3, [pc, #336]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039f6:	4951      	ldr	r1, [pc, #324]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a0a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a18:	4948      	ldr	r1, [pc, #288]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d015      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a2c:	4b43      	ldr	r3, [pc, #268]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	4940      	ldr	r1, [pc, #256]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a4a:	d105      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a3a      	ldr	r2, [pc, #232]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a56:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d015      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a64:	4b35      	ldr	r3, [pc, #212]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a72:	4932      	ldr	r1, [pc, #200]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a82:	d105      	bne.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a84:	4b2d      	ldr	r3, [pc, #180]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a2c      	ldr	r2, [pc, #176]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a8e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d015      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a9c:	4b27      	ldr	r3, [pc, #156]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aa2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aaa:	4924      	ldr	r1, [pc, #144]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aba:	d105      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003abc:	4b1f      	ldr	r3, [pc, #124]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ac6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d015      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ada:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae2:	4916      	ldr	r1, [pc, #88]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003af2:	d105      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af4:	4b11      	ldr	r3, [pc, #68]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	4a10      	ldr	r2, [pc, #64]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003afe:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d019      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1a:	4908      	ldr	r1, [pc, #32]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b2a:	d109      	bne.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b2c:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a02      	ldr	r2, [pc, #8]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b36:	60d3      	str	r3, [r2, #12]
 8003b38:	e002      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d015      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b4c:	4b29      	ldr	r3, [pc, #164]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b52:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b5a:	4926      	ldr	r1, [pc, #152]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b6a:	d105      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b6c:	4b21      	ldr	r3, [pc, #132]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	4a20      	ldr	r2, [pc, #128]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b76:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d015      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b84:	4b1b      	ldr	r3, [pc, #108]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b8a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b92:	4918      	ldr	r1, [pc, #96]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba2:	d105      	bne.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ba4:	4b13      	ldr	r3, [pc, #76]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4a12      	ldr	r2, [pc, #72]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bae:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d015      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bca:	490a      	ldr	r1, [pc, #40]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bda:	d105      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bdc:	4b05      	ldr	r3, [pc, #20]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	4a04      	ldr	r2, [pc, #16]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003be2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003be6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003be8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000

08003bf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e049      	b.n	8003c9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fc ff36 	bl	8000a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fa5c 	bl	80040f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
	...

08003ca8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d109      	bne.n	8003ccc <HAL_TIM_PWM_Start+0x24>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	bf14      	ite	ne
 8003cc4:	2301      	movne	r3, #1
 8003cc6:	2300      	moveq	r3, #0
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	e03c      	b.n	8003d46 <HAL_TIM_PWM_Start+0x9e>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d109      	bne.n	8003ce6 <HAL_TIM_PWM_Start+0x3e>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	bf14      	ite	ne
 8003cde:	2301      	movne	r3, #1
 8003ce0:	2300      	moveq	r3, #0
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	e02f      	b.n	8003d46 <HAL_TIM_PWM_Start+0x9e>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x58>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e022      	b.n	8003d46 <HAL_TIM_PWM_Start+0x9e>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d109      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x72>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e015      	b.n	8003d46 <HAL_TIM_PWM_Start+0x9e>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x8c>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e008      	b.n	8003d46 <HAL_TIM_PWM_Start+0x9e>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e0a6      	b.n	8003e9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xb6>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d5c:	e023      	b.n	8003da6 <HAL_TIM_PWM_Start+0xfe>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0xc6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d6c:	e01b      	b.n	8003da6 <HAL_TIM_PWM_Start+0xfe>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xd6>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d7c:	e013      	b.n	8003da6 <HAL_TIM_PWM_Start+0xfe>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d104      	bne.n	8003d8e <HAL_TIM_PWM_Start+0xe6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2202      	movs	r2, #2
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d8c:	e00b      	b.n	8003da6 <HAL_TIM_PWM_Start+0xfe>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d104      	bne.n	8003d9e <HAL_TIM_PWM_Start+0xf6>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d9c:	e003      	b.n	8003da6 <HAL_TIM_PWM_Start+0xfe>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2201      	movs	r2, #1
 8003dac:	6839      	ldr	r1, [r7, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fd7e 	bl	80048b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea4 <HAL_TIM_PWM_Start+0x1fc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d018      	beq.n	8003df0 <HAL_TIM_PWM_Start+0x148>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a39      	ldr	r2, [pc, #228]	@ (8003ea8 <HAL_TIM_PWM_Start+0x200>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d013      	beq.n	8003df0 <HAL_TIM_PWM_Start+0x148>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a37      	ldr	r2, [pc, #220]	@ (8003eac <HAL_TIM_PWM_Start+0x204>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00e      	beq.n	8003df0 <HAL_TIM_PWM_Start+0x148>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a36      	ldr	r2, [pc, #216]	@ (8003eb0 <HAL_TIM_PWM_Start+0x208>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d009      	beq.n	8003df0 <HAL_TIM_PWM_Start+0x148>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a34      	ldr	r2, [pc, #208]	@ (8003eb4 <HAL_TIM_PWM_Start+0x20c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d004      	beq.n	8003df0 <HAL_TIM_PWM_Start+0x148>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a33      	ldr	r2, [pc, #204]	@ (8003eb8 <HAL_TIM_PWM_Start+0x210>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x14c>
 8003df0:	2301      	movs	r3, #1
 8003df2:	e000      	b.n	8003df6 <HAL_TIM_PWM_Start+0x14e>
 8003df4:	2300      	movs	r3, #0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ea4 <HAL_TIM_PWM_Start+0x1fc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d022      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x1b2>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e1c:	d01d      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x1b2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a26      	ldr	r2, [pc, #152]	@ (8003ebc <HAL_TIM_PWM_Start+0x214>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d018      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x1b2>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	@ (8003ec0 <HAL_TIM_PWM_Start+0x218>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d013      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x1b2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a23      	ldr	r2, [pc, #140]	@ (8003ec4 <HAL_TIM_PWM_Start+0x21c>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d00e      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x1b2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a19      	ldr	r2, [pc, #100]	@ (8003ea8 <HAL_TIM_PWM_Start+0x200>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d009      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x1b2>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a18      	ldr	r2, [pc, #96]	@ (8003eac <HAL_TIM_PWM_Start+0x204>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x1b2>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a18      	ldr	r2, [pc, #96]	@ (8003eb8 <HAL_TIM_PWM_Start+0x210>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d115      	bne.n	8003e86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	4b19      	ldr	r3, [pc, #100]	@ (8003ec8 <HAL_TIM_PWM_Start+0x220>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b06      	cmp	r3, #6
 8003e6a:	d015      	beq.n	8003e98 <HAL_TIM_PWM_Start+0x1f0>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e72:	d011      	beq.n	8003e98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e84:	e008      	b.n	8003e98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	e000      	b.n	8003e9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40013400 	.word	0x40013400
 8003eac:	40014000 	.word	0x40014000
 8003eb0:	40014400 	.word	0x40014400
 8003eb4:	40014800 	.word	0x40014800
 8003eb8:	40015000 	.word	0x40015000
 8003ebc:	40000400 	.word	0x40000400
 8003ec0:	40000800 	.word	0x40000800
 8003ec4:	40000c00 	.word	0x40000c00
 8003ec8:	00010007 	.word	0x00010007

08003ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	e0ff      	b.n	80040ea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b14      	cmp	r3, #20
 8003ef6:	f200 80f0 	bhi.w	80040da <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f55 	.word	0x08003f55
 8003f04:	080040db 	.word	0x080040db
 8003f08:	080040db 	.word	0x080040db
 8003f0c:	080040db 	.word	0x080040db
 8003f10:	08003f95 	.word	0x08003f95
 8003f14:	080040db 	.word	0x080040db
 8003f18:	080040db 	.word	0x080040db
 8003f1c:	080040db 	.word	0x080040db
 8003f20:	08003fd7 	.word	0x08003fd7
 8003f24:	080040db 	.word	0x080040db
 8003f28:	080040db 	.word	0x080040db
 8003f2c:	080040db 	.word	0x080040db
 8003f30:	08004017 	.word	0x08004017
 8003f34:	080040db 	.word	0x080040db
 8003f38:	080040db 	.word	0x080040db
 8003f3c:	080040db 	.word	0x080040db
 8003f40:	08004059 	.word	0x08004059
 8003f44:	080040db 	.word	0x080040db
 8003f48:	080040db 	.word	0x080040db
 8003f4c:	080040db 	.word	0x080040db
 8003f50:	08004099 	.word	0x08004099
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68b9      	ldr	r1, [r7, #8]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 f97e 	bl	800425c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699a      	ldr	r2, [r3, #24]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0208 	orr.w	r2, r2, #8
 8003f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699a      	ldr	r2, [r3, #24]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0204 	bic.w	r2, r2, #4
 8003f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6999      	ldr	r1, [r3, #24]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	619a      	str	r2, [r3, #24]
      break;
 8003f92:	e0a5      	b.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 f9f8 	bl	8004390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699a      	ldr	r2, [r3, #24]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699a      	ldr	r2, [r3, #24]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6999      	ldr	r1, [r3, #24]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	619a      	str	r2, [r3, #24]
      break;
 8003fd4:	e084      	b.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fa6b 	bl	80044b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69da      	ldr	r2, [r3, #28]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f042 0208 	orr.w	r2, r2, #8
 8003ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0204 	bic.w	r2, r2, #4
 8004000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	69d9      	ldr	r1, [r3, #28]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	430a      	orrs	r2, r1
 8004012:	61da      	str	r2, [r3, #28]
      break;
 8004014:	e064      	b.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68b9      	ldr	r1, [r7, #8]
 800401c:	4618      	mov	r0, r3
 800401e:	f000 fadd 	bl	80045dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	69d9      	ldr	r1, [r3, #28]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	021a      	lsls	r2, r3, #8
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	61da      	str	r2, [r3, #28]
      break;
 8004056:	e043      	b.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fb50 	bl	8004704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0208 	orr.w	r2, r2, #8
 8004072:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0204 	bic.w	r2, r2, #4
 8004082:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004096:	e023      	b.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68b9      	ldr	r1, [r7, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fb9a 	bl	80047d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	021a      	lsls	r2, r3, #8
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	430a      	orrs	r2, r1
 80040d6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80040d8:	e002      	b.n	80040e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
      break;
 80040de:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop

080040f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a4c      	ldr	r2, [pc, #304]	@ (8004238 <TIM_Base_SetConfig+0x144>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d017      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004112:	d013      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	4a49      	ldr	r2, [pc, #292]	@ (800423c <TIM_Base_SetConfig+0x148>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d00f      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a48      	ldr	r2, [pc, #288]	@ (8004240 <TIM_Base_SetConfig+0x14c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	4a47      	ldr	r2, [pc, #284]	@ (8004244 <TIM_Base_SetConfig+0x150>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a46      	ldr	r2, [pc, #280]	@ (8004248 <TIM_Base_SetConfig+0x154>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x48>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a45      	ldr	r2, [pc, #276]	@ (800424c <TIM_Base_SetConfig+0x158>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a39      	ldr	r2, [pc, #228]	@ (8004238 <TIM_Base_SetConfig+0x144>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d023      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800415c:	d01f      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a36      	ldr	r2, [pc, #216]	@ (800423c <TIM_Base_SetConfig+0x148>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d01b      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a35      	ldr	r2, [pc, #212]	@ (8004240 <TIM_Base_SetConfig+0x14c>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d017      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a34      	ldr	r2, [pc, #208]	@ (8004244 <TIM_Base_SetConfig+0x150>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d013      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a33      	ldr	r2, [pc, #204]	@ (8004248 <TIM_Base_SetConfig+0x154>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d00f      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a33      	ldr	r2, [pc, #204]	@ (8004250 <TIM_Base_SetConfig+0x15c>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00b      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a32      	ldr	r2, [pc, #200]	@ (8004254 <TIM_Base_SetConfig+0x160>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d007      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a31      	ldr	r2, [pc, #196]	@ (8004258 <TIM_Base_SetConfig+0x164>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d003      	beq.n	800419e <TIM_Base_SetConfig+0xaa>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2c      	ldr	r2, [pc, #176]	@ (800424c <TIM_Base_SetConfig+0x158>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d108      	bne.n	80041b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a18      	ldr	r2, [pc, #96]	@ (8004238 <TIM_Base_SetConfig+0x144>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d013      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a1a      	ldr	r2, [pc, #104]	@ (8004248 <TIM_Base_SetConfig+0x154>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <TIM_Base_SetConfig+0x15c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a19      	ldr	r2, [pc, #100]	@ (8004254 <TIM_Base_SetConfig+0x160>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a18      	ldr	r2, [pc, #96]	@ (8004258 <TIM_Base_SetConfig+0x164>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0x110>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a13      	ldr	r2, [pc, #76]	@ (800424c <TIM_Base_SetConfig+0x158>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d103      	bne.n	800420c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b01      	cmp	r3, #1
 800421c:	d105      	bne.n	800422a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f023 0201 	bic.w	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	611a      	str	r2, [r3, #16]
  }
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	40012c00 	.word	0x40012c00
 800423c:	40000400 	.word	0x40000400
 8004240:	40000800 	.word	0x40000800
 8004244:	40000c00 	.word	0x40000c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40015000 	.word	0x40015000
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400
 8004258:	40014800 	.word	0x40014800

0800425c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f023 0201 	bic.w	r2, r3, #1
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800428a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f023 0303 	bic.w	r3, r3, #3
 8004296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f023 0302 	bic.w	r3, r3, #2
 80042a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a30      	ldr	r2, [pc, #192]	@ (8004378 <TIM_OC1_SetConfig+0x11c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d013      	beq.n	80042e4 <TIM_OC1_SetConfig+0x88>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a2f      	ldr	r2, [pc, #188]	@ (800437c <TIM_OC1_SetConfig+0x120>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00f      	beq.n	80042e4 <TIM_OC1_SetConfig+0x88>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a2e      	ldr	r2, [pc, #184]	@ (8004380 <TIM_OC1_SetConfig+0x124>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d00b      	beq.n	80042e4 <TIM_OC1_SetConfig+0x88>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a2d      	ldr	r2, [pc, #180]	@ (8004384 <TIM_OC1_SetConfig+0x128>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d007      	beq.n	80042e4 <TIM_OC1_SetConfig+0x88>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a2c      	ldr	r2, [pc, #176]	@ (8004388 <TIM_OC1_SetConfig+0x12c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_OC1_SetConfig+0x88>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a2b      	ldr	r2, [pc, #172]	@ (800438c <TIM_OC1_SetConfig+0x130>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d10c      	bne.n	80042fe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	f023 0308 	bic.w	r3, r3, #8
 80042ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	f023 0304 	bic.w	r3, r3, #4
 80042fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1d      	ldr	r2, [pc, #116]	@ (8004378 <TIM_OC1_SetConfig+0x11c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d013      	beq.n	800432e <TIM_OC1_SetConfig+0xd2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <TIM_OC1_SetConfig+0x120>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00f      	beq.n	800432e <TIM_OC1_SetConfig+0xd2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <TIM_OC1_SetConfig+0x124>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d00b      	beq.n	800432e <TIM_OC1_SetConfig+0xd2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1a      	ldr	r2, [pc, #104]	@ (8004384 <TIM_OC1_SetConfig+0x128>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d007      	beq.n	800432e <TIM_OC1_SetConfig+0xd2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a19      	ldr	r2, [pc, #100]	@ (8004388 <TIM_OC1_SetConfig+0x12c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d003      	beq.n	800432e <TIM_OC1_SetConfig+0xd2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a18      	ldr	r2, [pc, #96]	@ (800438c <TIM_OC1_SetConfig+0x130>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d111      	bne.n	8004352 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800433c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4313      	orrs	r3, r2
 8004350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	697a      	ldr	r2, [r7, #20]
 800436a:	621a      	str	r2, [r3, #32]
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr
 8004378:	40012c00 	.word	0x40012c00
 800437c:	40013400 	.word	0x40013400
 8004380:	40014000 	.word	0x40014000
 8004384:	40014400 	.word	0x40014400
 8004388:	40014800 	.word	0x40014800
 800438c:	40015000 	.word	0x40015000

08004390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f023 0210 	bic.w	r2, r3, #16
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	021b      	lsls	r3, r3, #8
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0320 	bic.w	r3, r3, #32
 80043de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a2c      	ldr	r2, [pc, #176]	@ (80044a0 <TIM_OC2_SetConfig+0x110>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d007      	beq.n	8004404 <TIM_OC2_SetConfig+0x74>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a2b      	ldr	r2, [pc, #172]	@ (80044a4 <TIM_OC2_SetConfig+0x114>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d003      	beq.n	8004404 <TIM_OC2_SetConfig+0x74>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a2a      	ldr	r2, [pc, #168]	@ (80044a8 <TIM_OC2_SetConfig+0x118>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d10d      	bne.n	8004420 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800441e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a1f      	ldr	r2, [pc, #124]	@ (80044a0 <TIM_OC2_SetConfig+0x110>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <TIM_OC2_SetConfig+0xc0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a1e      	ldr	r2, [pc, #120]	@ (80044a4 <TIM_OC2_SetConfig+0x114>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00f      	beq.n	8004450 <TIM_OC2_SetConfig+0xc0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a1e      	ldr	r2, [pc, #120]	@ (80044ac <TIM_OC2_SetConfig+0x11c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <TIM_OC2_SetConfig+0xc0>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a1d      	ldr	r2, [pc, #116]	@ (80044b0 <TIM_OC2_SetConfig+0x120>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <TIM_OC2_SetConfig+0xc0>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a1c      	ldr	r2, [pc, #112]	@ (80044b4 <TIM_OC2_SetConfig+0x124>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <TIM_OC2_SetConfig+0xc0>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a17      	ldr	r2, [pc, #92]	@ (80044a8 <TIM_OC2_SetConfig+0x118>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d113      	bne.n	8004478 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004456:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800445e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	4313      	orrs	r3, r2
 800446a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	693a      	ldr	r2, [r7, #16]
 8004474:	4313      	orrs	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	bf00      	nop
 8004494:	371c      	adds	r7, #28
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40012c00 	.word	0x40012c00
 80044a4:	40013400 	.word	0x40013400
 80044a8:	40015000 	.word	0x40015000
 80044ac:	40014000 	.word	0x40014000
 80044b0:	40014400 	.word	0x40014400
 80044b4:	40014800 	.word	0x40014800

080044b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0303 	bic.w	r3, r3, #3
 80044f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004504:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2b      	ldr	r2, [pc, #172]	@ (80045c4 <TIM_OC3_SetConfig+0x10c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d007      	beq.n	800452a <TIM_OC3_SetConfig+0x72>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2a      	ldr	r2, [pc, #168]	@ (80045c8 <TIM_OC3_SetConfig+0x110>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d003      	beq.n	800452a <TIM_OC3_SetConfig+0x72>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a29      	ldr	r2, [pc, #164]	@ (80045cc <TIM_OC3_SetConfig+0x114>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d10d      	bne.n	8004546 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a1e      	ldr	r2, [pc, #120]	@ (80045c4 <TIM_OC3_SetConfig+0x10c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_OC3_SetConfig+0xbe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a1d      	ldr	r2, [pc, #116]	@ (80045c8 <TIM_OC3_SetConfig+0x110>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_OC3_SetConfig+0xbe>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <TIM_OC3_SetConfig+0x118>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_OC3_SetConfig+0xbe>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <TIM_OC3_SetConfig+0x11c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_OC3_SetConfig+0xbe>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <TIM_OC3_SetConfig+0x120>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_OC3_SetConfig+0xbe>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a16      	ldr	r2, [pc, #88]	@ (80045cc <TIM_OC3_SetConfig+0x114>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d113      	bne.n	800459e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800457c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	4313      	orrs	r3, r2
 800459c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	693a      	ldr	r2, [r7, #16]
 80045a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	621a      	str	r2, [r3, #32]
}
 80045b8:	bf00      	nop
 80045ba:	371c      	adds	r7, #28
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	40012c00 	.word	0x40012c00
 80045c8:	40013400 	.word	0x40013400
 80045cc:	40015000 	.word	0x40015000
 80045d0:	40014000 	.word	0x40014000
 80045d4:	40014400 	.word	0x40014400
 80045d8:	40014800 	.word	0x40014800

080045dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800460a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800462a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	031b      	lsls	r3, r3, #12
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a2c      	ldr	r2, [pc, #176]	@ (80046ec <TIM_OC4_SetConfig+0x110>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <TIM_OC4_SetConfig+0x74>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a2b      	ldr	r2, [pc, #172]	@ (80046f0 <TIM_OC4_SetConfig+0x114>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <TIM_OC4_SetConfig+0x74>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a2a      	ldr	r2, [pc, #168]	@ (80046f4 <TIM_OC4_SetConfig+0x118>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d10d      	bne.n	800466c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	031b      	lsls	r3, r3, #12
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800466a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1f      	ldr	r2, [pc, #124]	@ (80046ec <TIM_OC4_SetConfig+0x110>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <TIM_OC4_SetConfig+0xc0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a1e      	ldr	r2, [pc, #120]	@ (80046f0 <TIM_OC4_SetConfig+0x114>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d00f      	beq.n	800469c <TIM_OC4_SetConfig+0xc0>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4a1e      	ldr	r2, [pc, #120]	@ (80046f8 <TIM_OC4_SetConfig+0x11c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00b      	beq.n	800469c <TIM_OC4_SetConfig+0xc0>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	4a1d      	ldr	r2, [pc, #116]	@ (80046fc <TIM_OC4_SetConfig+0x120>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d007      	beq.n	800469c <TIM_OC4_SetConfig+0xc0>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <TIM_OC4_SetConfig+0x124>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <TIM_OC4_SetConfig+0xc0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a17      	ldr	r2, [pc, #92]	@ (80046f4 <TIM_OC4_SetConfig+0x118>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d113      	bne.n	80046c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	695b      	ldr	r3, [r3, #20]
 80046b0:	019b      	lsls	r3, r3, #6
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	697a      	ldr	r2, [r7, #20]
 80046dc:	621a      	str	r2, [r3, #32]
}
 80046de:	bf00      	nop
 80046e0:	371c      	adds	r7, #28
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	40012c00 	.word	0x40012c00
 80046f0:	40013400 	.word	0x40013400
 80046f4:	40015000 	.word	0x40015000
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800

08004704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004704:	b480      	push	{r7}
 8004706:	b087      	sub	sp, #28
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a1b      	ldr	r3, [r3, #32]
 8004718:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800472a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a19      	ldr	r2, [pc, #100]	@ (80047c0 <TIM_OC5_SetConfig+0xbc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <TIM_OC5_SetConfig+0x82>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a18      	ldr	r2, [pc, #96]	@ (80047c4 <TIM_OC5_SetConfig+0xc0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_OC5_SetConfig+0x82>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a17      	ldr	r2, [pc, #92]	@ (80047c8 <TIM_OC5_SetConfig+0xc4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_OC5_SetConfig+0x82>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a16      	ldr	r2, [pc, #88]	@ (80047cc <TIM_OC5_SetConfig+0xc8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_OC5_SetConfig+0x82>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a15      	ldr	r2, [pc, #84]	@ (80047d0 <TIM_OC5_SetConfig+0xcc>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_OC5_SetConfig+0x82>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a14      	ldr	r2, [pc, #80]	@ (80047d4 <TIM_OC5_SetConfig+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d109      	bne.n	800479a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	021b      	lsls	r3, r3, #8
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	4313      	orrs	r3, r2
 8004798:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	621a      	str	r2, [r3, #32]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800
 80047d4:	40015000 	.word	0x40015000

080047d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4313      	orrs	r3, r2
 8004816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800481e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	051b      	lsls	r3, r3, #20
 8004826:	693a      	ldr	r2, [r7, #16]
 8004828:	4313      	orrs	r3, r2
 800482a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a1a      	ldr	r2, [pc, #104]	@ (8004898 <TIM_OC6_SetConfig+0xc0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d013      	beq.n	800485c <TIM_OC6_SetConfig+0x84>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a19      	ldr	r2, [pc, #100]	@ (800489c <TIM_OC6_SetConfig+0xc4>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00f      	beq.n	800485c <TIM_OC6_SetConfig+0x84>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a18      	ldr	r2, [pc, #96]	@ (80048a0 <TIM_OC6_SetConfig+0xc8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d00b      	beq.n	800485c <TIM_OC6_SetConfig+0x84>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a17      	ldr	r2, [pc, #92]	@ (80048a4 <TIM_OC6_SetConfig+0xcc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d007      	beq.n	800485c <TIM_OC6_SetConfig+0x84>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a16      	ldr	r2, [pc, #88]	@ (80048a8 <TIM_OC6_SetConfig+0xd0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_OC6_SetConfig+0x84>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a15      	ldr	r2, [pc, #84]	@ (80048ac <TIM_OC6_SetConfig+0xd4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d109      	bne.n	8004870 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	029b      	lsls	r3, r3, #10
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	621a      	str	r2, [r3, #32]
}
 800488a:	bf00      	nop
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40012c00 	.word	0x40012c00
 800489c:	40013400 	.word	0x40013400
 80048a0:	40014000 	.word	0x40014000
 80048a4:	40014400 	.word	0x40014400
 80048a8:	40014800 	.word	0x40014800
 80048ac:	40015000 	.word	0x40015000

080048b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f003 031f 	and.w	r3, r3, #31
 80048c2:	2201      	movs	r2, #1
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a1a      	ldr	r2, [r3, #32]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	401a      	ands	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1a      	ldr	r2, [r3, #32]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	f003 031f 	and.w	r3, r3, #31
 80048e2:	6879      	ldr	r1, [r7, #4]
 80048e4:	fa01 f303 	lsl.w	r3, r1, r3
 80048e8:	431a      	orrs	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]
}
 80048ee:	bf00      	nop
 80048f0:	371c      	adds	r7, #28
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
	...

080048fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490c:	2b01      	cmp	r3, #1
 800490e:	d101      	bne.n	8004914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004910:	2302      	movs	r3, #2
 8004912:	e074      	b.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a34      	ldr	r2, [pc, #208]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d009      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a33      	ldr	r2, [pc, #204]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d004      	beq.n	8004952 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a31      	ldr	r2, [pc, #196]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d108      	bne.n	8004964 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004958:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800496a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800496e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a21      	ldr	r2, [pc, #132]	@ (8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d022      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004994:	d01d      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d018      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d013      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00e      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a15      	ldr	r2, [pc, #84]	@ (8004a10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d009      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a18      	ldr	r2, [pc, #96]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a11      	ldr	r2, [pc, #68]	@ (8004a14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10c      	bne.n	80049ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40013400 	.word	0x40013400
 8004a14:	40015000 	.word	0x40015000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40014000 	.word	0x40014000

08004a28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e078      	b.n	8004b36 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b44 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a1b      	ldr	r2, [pc, #108]	@ (8004b48 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a19      	ldr	r2, [pc, #100]	@ (8004b4c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d11c      	bne.n	8004b24 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	051b      	lsls	r3, r3, #20
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3714      	adds	r7, #20
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40015000 	.word	0x40015000

08004b50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e042      	b.n	8004be8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f83b 	bl	8004bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2224      	movs	r2, #36	@ 0x24
 8004b7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fb2e 	bl	80051fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f82f 	bl	8004c04 <UART_SetConfig>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e01b      	b.n	8004be8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685a      	ldr	r2, [r3, #4]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f042 0201 	orr.w	r2, r2, #1
 8004bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fbad 	bl	8005340 <UART_CheckIdleState>
 8004be6:	4603      	mov	r3, r0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c08:	b08c      	sub	sp, #48	@ 0x30
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	4baa      	ldr	r3, [pc, #680]	@ (8004edc <UART_SetConfig+0x2d8>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c3c:	430b      	orrs	r3, r1
 8004c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	68da      	ldr	r2, [r3, #12]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a9f      	ldr	r2, [pc, #636]	@ (8004ee0 <UART_SetConfig+0x2dc>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d004      	beq.n	8004c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004c7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c84:	430b      	orrs	r3, r1
 8004c86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	f023 010f 	bic.w	r1, r3, #15
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a90      	ldr	r2, [pc, #576]	@ (8004ee4 <UART_SetConfig+0x2e0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d125      	bne.n	8004cf4 <UART_SetConfig+0xf0>
 8004ca8:	4b8f      	ldr	r3, [pc, #572]	@ (8004ee8 <UART_SetConfig+0x2e4>)
 8004caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d81a      	bhi.n	8004cec <UART_SetConfig+0xe8>
 8004cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <UART_SetConfig+0xb8>)
 8004cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cbc:	08004ccd 	.word	0x08004ccd
 8004cc0:	08004cdd 	.word	0x08004cdd
 8004cc4:	08004cd5 	.word	0x08004cd5
 8004cc8:	08004ce5 	.word	0x08004ce5
 8004ccc:	2301      	movs	r3, #1
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd2:	e116      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	e112      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004cdc:	2304      	movs	r3, #4
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ce2:	e10e      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004ce4:	2308      	movs	r3, #8
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cea:	e10a      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004cec:	2310      	movs	r3, #16
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cf2:	e106      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a7c      	ldr	r2, [pc, #496]	@ (8004eec <UART_SetConfig+0x2e8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d138      	bne.n	8004d70 <UART_SetConfig+0x16c>
 8004cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee8 <UART_SetConfig+0x2e4>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d04:	f003 030c 	and.w	r3, r3, #12
 8004d08:	2b0c      	cmp	r3, #12
 8004d0a:	d82d      	bhi.n	8004d68 <UART_SetConfig+0x164>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <UART_SetConfig+0x110>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d49 	.word	0x08004d49
 8004d18:	08004d69 	.word	0x08004d69
 8004d1c:	08004d69 	.word	0x08004d69
 8004d20:	08004d69 	.word	0x08004d69
 8004d24:	08004d59 	.word	0x08004d59
 8004d28:	08004d69 	.word	0x08004d69
 8004d2c:	08004d69 	.word	0x08004d69
 8004d30:	08004d69 	.word	0x08004d69
 8004d34:	08004d51 	.word	0x08004d51
 8004d38:	08004d69 	.word	0x08004d69
 8004d3c:	08004d69 	.word	0x08004d69
 8004d40:	08004d69 	.word	0x08004d69
 8004d44:	08004d61 	.word	0x08004d61
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d4e:	e0d8      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004d50:	2302      	movs	r3, #2
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d56:	e0d4      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d5e:	e0d0      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004d60:	2308      	movs	r3, #8
 8004d62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d66:	e0cc      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d6e:	e0c8      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a5e      	ldr	r2, [pc, #376]	@ (8004ef0 <UART_SetConfig+0x2ec>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d125      	bne.n	8004dc6 <UART_SetConfig+0x1c2>
 8004d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ee8 <UART_SetConfig+0x2e4>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004d84:	2b30      	cmp	r3, #48	@ 0x30
 8004d86:	d016      	beq.n	8004db6 <UART_SetConfig+0x1b2>
 8004d88:	2b30      	cmp	r3, #48	@ 0x30
 8004d8a:	d818      	bhi.n	8004dbe <UART_SetConfig+0x1ba>
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d00a      	beq.n	8004da6 <UART_SetConfig+0x1a2>
 8004d90:	2b20      	cmp	r3, #32
 8004d92:	d814      	bhi.n	8004dbe <UART_SetConfig+0x1ba>
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <UART_SetConfig+0x19a>
 8004d98:	2b10      	cmp	r3, #16
 8004d9a:	d008      	beq.n	8004dae <UART_SetConfig+0x1aa>
 8004d9c:	e00f      	b.n	8004dbe <UART_SetConfig+0x1ba>
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004da4:	e0ad      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004da6:	2302      	movs	r3, #2
 8004da8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dac:	e0a9      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004dae:	2304      	movs	r3, #4
 8004db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004db4:	e0a5      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004db6:	2308      	movs	r3, #8
 8004db8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dbc:	e0a1      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dc4:	e09d      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a4a      	ldr	r2, [pc, #296]	@ (8004ef4 <UART_SetConfig+0x2f0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d125      	bne.n	8004e1c <UART_SetConfig+0x218>
 8004dd0:	4b45      	ldr	r3, [pc, #276]	@ (8004ee8 <UART_SetConfig+0x2e4>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dd6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004dda:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ddc:	d016      	beq.n	8004e0c <UART_SetConfig+0x208>
 8004dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8004de0:	d818      	bhi.n	8004e14 <UART_SetConfig+0x210>
 8004de2:	2b80      	cmp	r3, #128	@ 0x80
 8004de4:	d00a      	beq.n	8004dfc <UART_SetConfig+0x1f8>
 8004de6:	2b80      	cmp	r3, #128	@ 0x80
 8004de8:	d814      	bhi.n	8004e14 <UART_SetConfig+0x210>
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d002      	beq.n	8004df4 <UART_SetConfig+0x1f0>
 8004dee:	2b40      	cmp	r3, #64	@ 0x40
 8004df0:	d008      	beq.n	8004e04 <UART_SetConfig+0x200>
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x210>
 8004df4:	2300      	movs	r3, #0
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004dfa:	e082      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e02:	e07e      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e04:	2304      	movs	r3, #4
 8004e06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e0a:	e07a      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e0c:	2308      	movs	r3, #8
 8004e0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e12:	e076      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e14:	2310      	movs	r3, #16
 8004e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e1a:	e072      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a35      	ldr	r2, [pc, #212]	@ (8004ef8 <UART_SetConfig+0x2f4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d12a      	bne.n	8004e7c <UART_SetConfig+0x278>
 8004e26:	4b30      	ldr	r3, [pc, #192]	@ (8004ee8 <UART_SetConfig+0x2e4>)
 8004e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e34:	d01a      	beq.n	8004e6c <UART_SetConfig+0x268>
 8004e36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e3a:	d81b      	bhi.n	8004e74 <UART_SetConfig+0x270>
 8004e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e40:	d00c      	beq.n	8004e5c <UART_SetConfig+0x258>
 8004e42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e46:	d815      	bhi.n	8004e74 <UART_SetConfig+0x270>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <UART_SetConfig+0x250>
 8004e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e50:	d008      	beq.n	8004e64 <UART_SetConfig+0x260>
 8004e52:	e00f      	b.n	8004e74 <UART_SetConfig+0x270>
 8004e54:	2300      	movs	r3, #0
 8004e56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e5a:	e052      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e5c:	2302      	movs	r3, #2
 8004e5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e62:	e04e      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e64:	2304      	movs	r3, #4
 8004e66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e6a:	e04a      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e6c:	2308      	movs	r3, #8
 8004e6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e72:	e046      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e74:	2310      	movs	r3, #16
 8004e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004e7a:	e042      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <UART_SetConfig+0x2dc>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d13a      	bne.n	8004efc <UART_SetConfig+0x2f8>
 8004e86:	4b18      	ldr	r3, [pc, #96]	@ (8004ee8 <UART_SetConfig+0x2e4>)
 8004e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004e90:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e94:	d01a      	beq.n	8004ecc <UART_SetConfig+0x2c8>
 8004e96:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e9a:	d81b      	bhi.n	8004ed4 <UART_SetConfig+0x2d0>
 8004e9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea0:	d00c      	beq.n	8004ebc <UART_SetConfig+0x2b8>
 8004ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea6:	d815      	bhi.n	8004ed4 <UART_SetConfig+0x2d0>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <UART_SetConfig+0x2b0>
 8004eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eb0:	d008      	beq.n	8004ec4 <UART_SetConfig+0x2c0>
 8004eb2:	e00f      	b.n	8004ed4 <UART_SetConfig+0x2d0>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eba:	e022      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec2:	e01e      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004ec4:	2304      	movs	r3, #4
 8004ec6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eca:	e01a      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004ecc:	2308      	movs	r3, #8
 8004ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ed2:	e016      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004ed4:	2310      	movs	r3, #16
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eda:	e012      	b.n	8004f02 <UART_SetConfig+0x2fe>
 8004edc:	cfff69f3 	.word	0xcfff69f3
 8004ee0:	40008000 	.word	0x40008000
 8004ee4:	40013800 	.word	0x40013800
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	40004400 	.word	0x40004400
 8004ef0:	40004800 	.word	0x40004800
 8004ef4:	40004c00 	.word	0x40004c00
 8004ef8:	40005000 	.word	0x40005000
 8004efc:	2310      	movs	r3, #16
 8004efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4aae      	ldr	r2, [pc, #696]	@ (80051c0 <UART_SetConfig+0x5bc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	f040 8097 	bne.w	800503c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d823      	bhi.n	8004f5e <UART_SetConfig+0x35a>
 8004f16:	a201      	add	r2, pc, #4	@ (adr r2, 8004f1c <UART_SetConfig+0x318>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f41 	.word	0x08004f41
 8004f20:	08004f5f 	.word	0x08004f5f
 8004f24:	08004f49 	.word	0x08004f49
 8004f28:	08004f5f 	.word	0x08004f5f
 8004f2c:	08004f4f 	.word	0x08004f4f
 8004f30:	08004f5f 	.word	0x08004f5f
 8004f34:	08004f5f 	.word	0x08004f5f
 8004f38:	08004f5f 	.word	0x08004f5f
 8004f3c:	08004f57 	.word	0x08004f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7fe fb9a 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8004f44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f46:	e010      	b.n	8004f6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f48:	4b9e      	ldr	r3, [pc, #632]	@ (80051c4 <UART_SetConfig+0x5c0>)
 8004f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f4c:	e00d      	b.n	8004f6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4e:	f7fe fb25 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8004f52:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f54:	e009      	b.n	8004f6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f5c:	e005      	b.n	8004f6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 8130 	beq.w	80051d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f76:	4a94      	ldr	r2, [pc, #592]	@ (80051c8 <UART_SetConfig+0x5c4>)
 8004f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	685a      	ldr	r2, [r3, #4]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d305      	bcc.n	8004fa2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d903      	bls.n	8004faa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004fa8:	e113      	b.n	80051d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	2200      	movs	r2, #0
 8004fae:	60bb      	str	r3, [r7, #8]
 8004fb0:	60fa      	str	r2, [r7, #12]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	4a84      	ldr	r2, [pc, #528]	@ (80051c8 <UART_SetConfig+0x5c4>)
 8004fb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	607a      	str	r2, [r7, #4]
 8004fc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fcc:	f7fb f924 	bl	8000218 <__aeabi_uldivmod>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	020b      	lsls	r3, r1, #8
 8004fe2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fe6:	0202      	lsls	r2, r0, #8
 8004fe8:	6979      	ldr	r1, [r7, #20]
 8004fea:	6849      	ldr	r1, [r1, #4]
 8004fec:	0849      	lsrs	r1, r1, #1
 8004fee:	2000      	movs	r0, #0
 8004ff0:	460c      	mov	r4, r1
 8004ff2:	4605      	mov	r5, r0
 8004ff4:	eb12 0804 	adds.w	r8, r2, r4
 8004ff8:	eb43 0905 	adc.w	r9, r3, r5
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	469a      	mov	sl, r3
 8005004:	4693      	mov	fp, r2
 8005006:	4652      	mov	r2, sl
 8005008:	465b      	mov	r3, fp
 800500a:	4640      	mov	r0, r8
 800500c:	4649      	mov	r1, r9
 800500e:	f7fb f903 	bl	8000218 <__aeabi_uldivmod>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4613      	mov	r3, r2
 8005018:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005020:	d308      	bcc.n	8005034 <UART_SetConfig+0x430>
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005028:	d204      	bcs.n	8005034 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	6a3a      	ldr	r2, [r7, #32]
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	e0ce      	b.n	80051d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800503a:	e0ca      	b.n	80051d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005044:	d166      	bne.n	8005114 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005046:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800504a:	2b08      	cmp	r3, #8
 800504c:	d827      	bhi.n	800509e <UART_SetConfig+0x49a>
 800504e:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0x450>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	08005079 	.word	0x08005079
 8005058:	08005081 	.word	0x08005081
 800505c:	08005089 	.word	0x08005089
 8005060:	0800509f 	.word	0x0800509f
 8005064:	0800508f 	.word	0x0800508f
 8005068:	0800509f 	.word	0x0800509f
 800506c:	0800509f 	.word	0x0800509f
 8005070:	0800509f 	.word	0x0800509f
 8005074:	08005097 	.word	0x08005097
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005078:	f7fe fafe 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800507c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800507e:	e014      	b.n	80050aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005080:	f7fe fb10 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8005084:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005086:	e010      	b.n	80050aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005088:	4b4e      	ldr	r3, [pc, #312]	@ (80051c4 <UART_SetConfig+0x5c0>)
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800508c:	e00d      	b.n	80050aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508e:	f7fe fa85 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8005092:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005094:	e009      	b.n	80050aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005096:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800509a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800509c:	e005      	b.n	80050aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80050a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f000 8090 	beq.w	80051d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b6:	4a44      	ldr	r2, [pc, #272]	@ (80051c8 <UART_SetConfig+0x5c4>)
 80050b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050bc:	461a      	mov	r2, r3
 80050be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050c4:	005a      	lsls	r2, r3, #1
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	441a      	add	r2, r3
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b0f      	cmp	r3, #15
 80050dc:	d916      	bls.n	800510c <UART_SetConfig+0x508>
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050e4:	d212      	bcs.n	800510c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	f023 030f 	bic.w	r3, r3, #15
 80050ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	085b      	lsrs	r3, r3, #1
 80050f4:	b29b      	uxth	r3, r3
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	b29a      	uxth	r2, r3
 80050fc:	8bfb      	ldrh	r3, [r7, #30]
 80050fe:	4313      	orrs	r3, r2
 8005100:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	8bfa      	ldrh	r2, [r7, #30]
 8005108:	60da      	str	r2, [r3, #12]
 800510a:	e062      	b.n	80051d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005112:	e05e      	b.n	80051d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005114:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005118:	2b08      	cmp	r3, #8
 800511a:	d828      	bhi.n	800516e <UART_SetConfig+0x56a>
 800511c:	a201      	add	r2, pc, #4	@ (adr r2, 8005124 <UART_SetConfig+0x520>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005149 	.word	0x08005149
 8005128:	08005151 	.word	0x08005151
 800512c:	08005159 	.word	0x08005159
 8005130:	0800516f 	.word	0x0800516f
 8005134:	0800515f 	.word	0x0800515f
 8005138:	0800516f 	.word	0x0800516f
 800513c:	0800516f 	.word	0x0800516f
 8005140:	0800516f 	.word	0x0800516f
 8005144:	08005167 	.word	0x08005167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe fa96 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800514c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800514e:	e014      	b.n	800517a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005150:	f7fe faa8 	bl	80036a4 <HAL_RCC_GetPCLK2Freq>
 8005154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005156:	e010      	b.n	800517a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005158:	4b1a      	ldr	r3, [pc, #104]	@ (80051c4 <UART_SetConfig+0x5c0>)
 800515a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800515c:	e00d      	b.n	800517a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800515e:	f7fe fa1d 	bl	800359c <HAL_RCC_GetSysClockFreq>
 8005162:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005164:	e009      	b.n	800517a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800516a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800516c:	e005      	b.n	800517a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800516e:	2300      	movs	r3, #0
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005178:	bf00      	nop
    }

    if (pclk != 0U)
 800517a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517c:	2b00      	cmp	r3, #0
 800517e:	d028      	beq.n	80051d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005184:	4a10      	ldr	r2, [pc, #64]	@ (80051c8 <UART_SetConfig+0x5c4>)
 8005186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800518a:	461a      	mov	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	085b      	lsrs	r3, r3, #1
 8005198:	441a      	add	r2, r3
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	2b0f      	cmp	r3, #15
 80051a8:	d910      	bls.n	80051cc <UART_SetConfig+0x5c8>
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b0:	d20c      	bcs.n	80051cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051b2:	6a3b      	ldr	r3, [r7, #32]
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60da      	str	r2, [r3, #12]
 80051bc:	e009      	b.n	80051d2 <UART_SetConfig+0x5ce>
 80051be:	bf00      	nop
 80051c0:	40008000 	.word	0x40008000
 80051c4:	00f42400 	.word	0x00f42400
 80051c8:	080056c8 	.word	0x080056c8
      }
      else
      {
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2201      	movs	r2, #1
 80051de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2200      	movs	r2, #0
 80051e6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051ee:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3730      	adds	r7, #48	@ 0x30
 80051f6:	46bd      	mov	sp, r7
 80051f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080051fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522a:	f003 0301 	and.w	r3, r3, #1
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01a      	beq.n	8005312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052fa:	d10a      	bne.n	8005312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b098      	sub	sp, #96	@ 0x60
 8005344:	af02      	add	r7, sp, #8
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005350:	f7fb fe50 	bl	8000ff4 <HAL_GetTick>
 8005354:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d12f      	bne.n	80053c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005364:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536c:	2200      	movs	r2, #0
 800536e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f88e 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d022      	beq.n	80053c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005386:	e853 3f00 	ldrex	r3, [r3]
 800538a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800538c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005392:	653b      	str	r3, [r7, #80]	@ 0x50
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	461a      	mov	r2, r3
 800539a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800539c:	647b      	str	r3, [r7, #68]	@ 0x44
 800539e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a4:	e841 2300 	strex	r3, r2, [r1]
 80053a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e6      	bne.n	800537e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e063      	b.n	800548c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d149      	bne.n	8005466 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053d2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053d6:	9300      	str	r3, [sp, #0]
 80053d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053da:	2200      	movs	r2, #0
 80053dc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f857 	bl	8005494 <UART_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d03c      	beq.n	8005466 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	623b      	str	r3, [r7, #32]
   return(result);
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005400:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800540a:	633b      	str	r3, [r7, #48]	@ 0x30
 800540c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005410:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005412:	e841 2300 	strex	r3, r2, [r1]
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	d1e6      	bne.n	80053ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3308      	adds	r3, #8
 8005424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	60fb      	str	r3, [r7, #12]
   return(result);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f023 0301 	bic.w	r3, r3, #1
 8005434:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3308      	adds	r3, #8
 800543c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800543e:	61fa      	str	r2, [r7, #28]
 8005440:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	69b9      	ldr	r1, [r7, #24]
 8005444:	69fa      	ldr	r2, [r7, #28]
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	617b      	str	r3, [r7, #20]
   return(result);
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e5      	bne.n	800541e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e012      	b.n	800548c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2220      	movs	r2, #32
 800546a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3758      	adds	r7, #88	@ 0x58
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	603b      	str	r3, [r7, #0]
 80054a0:	4613      	mov	r3, r2
 80054a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a4:	e04f      	b.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d04b      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ae:	f7fb fda1 	bl	8000ff4 <HAL_GetTick>
 80054b2:	4602      	mov	r2, r0
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d302      	bcc.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e04e      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0304 	and.w	r3, r3, #4
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d037      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2b80      	cmp	r3, #128	@ 0x80
 80054da:	d034      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	2b40      	cmp	r3, #64	@ 0x40
 80054e0:	d031      	beq.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69db      	ldr	r3, [r3, #28]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b08      	cmp	r3, #8
 80054ee:	d110      	bne.n	8005512 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2208      	movs	r2, #8
 80054f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 f838 	bl	800556e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2208      	movs	r2, #8
 8005502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e029      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69db      	ldr	r3, [r3, #28]
 8005518:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800551c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005520:	d111      	bne.n	8005546 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800552a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 f81e 	bl	800556e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2220      	movs	r2, #32
 8005536:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e00f      	b.n	8005566 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4013      	ands	r3, r2
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	429a      	cmp	r2, r3
 8005554:	bf0c      	ite	eq
 8005556:	2301      	moveq	r3, #1
 8005558:	2300      	movne	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	461a      	mov	r2, r3
 800555e:	79fb      	ldrb	r3, [r7, #7]
 8005560:	429a      	cmp	r2, r3
 8005562:	d0a0      	beq.n	80054a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800556e:	b480      	push	{r7}
 8005570:	b095      	sub	sp, #84	@ 0x54
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800557e:	e853 3f00 	ldrex	r3, [r3]
 8005582:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800558a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005594:	643b      	str	r3, [r7, #64]	@ 0x40
 8005596:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005598:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800559a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800559c:	e841 2300 	strex	r3, r2, [r1]
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1e6      	bne.n	8005576 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	3308      	adds	r3, #8
 80055ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	3308      	adds	r3, #8
 80055ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055d4:	e841 2300 	strex	r3, r2, [r1]
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1e3      	bne.n	80055a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d118      	bne.n	800561a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	f023 0310 	bic.w	r3, r3, #16
 80055fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560a:	6979      	ldr	r1, [r7, #20]
 800560c:	69ba      	ldr	r2, [r7, #24]
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	613b      	str	r3, [r7, #16]
   return(result);
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d1e6      	bne.n	80055e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800562e:	bf00      	nop
 8005630:	3754      	adds	r7, #84	@ 0x54
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <memset>:
 800563a:	4402      	add	r2, r0
 800563c:	4603      	mov	r3, r0
 800563e:	4293      	cmp	r3, r2
 8005640:	d100      	bne.n	8005644 <memset+0xa>
 8005642:	4770      	bx	lr
 8005644:	f803 1b01 	strb.w	r1, [r3], #1
 8005648:	e7f9      	b.n	800563e <memset+0x4>
	...

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4d0d      	ldr	r5, [pc, #52]	@ (8005684 <__libc_init_array+0x38>)
 8005650:	4c0d      	ldr	r4, [pc, #52]	@ (8005688 <__libc_init_array+0x3c>)
 8005652:	1b64      	subs	r4, r4, r5
 8005654:	10a4      	asrs	r4, r4, #2
 8005656:	2600      	movs	r6, #0
 8005658:	42a6      	cmp	r6, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	4d0b      	ldr	r5, [pc, #44]	@ (800568c <__libc_init_array+0x40>)
 800565e:	4c0c      	ldr	r4, [pc, #48]	@ (8005690 <__libc_init_array+0x44>)
 8005660:	f000 f818 	bl	8005694 <_init>
 8005664:	1b64      	subs	r4, r4, r5
 8005666:	10a4      	asrs	r4, r4, #2
 8005668:	2600      	movs	r6, #0
 800566a:	42a6      	cmp	r6, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	f855 3b04 	ldr.w	r3, [r5], #4
 8005674:	4798      	blx	r3
 8005676:	3601      	adds	r6, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	f855 3b04 	ldr.w	r3, [r5], #4
 800567e:	4798      	blx	r3
 8005680:	3601      	adds	r6, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	080056e8 	.word	0x080056e8
 8005688:	080056e8 	.word	0x080056e8
 800568c:	080056e8 	.word	0x080056e8
 8005690:	080056ec 	.word	0x080056ec

08005694 <_init>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr

080056a0 <_fini>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr
